{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, Constants, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentHandler =\n/** @class */\nfunction (_super) {\n  __extends(SilentHandler, _super);\n\n  function SilentHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, navigateFrameWait) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n\n    _this.navigateFrameWait = navigateFrameWait;\n    return _this;\n  }\n  /**\r\n   * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n   * @param urlNavigate\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (StringUtils.isEmpty(requestUrl)) {\n              // Throw error if request URL is empty.\n              this.browserRequestLogger.info(\"Navigate url is empty\");\n              throw BrowserAuthError.createEmptyNavigationUriError();\n            }\n\n            if (!this.navigateFrameWait) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.loadFrame(requestUrl)];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = this.loadFrameSync(requestUrl);\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , _a];\n        }\n      });\n    });\n  };\n  /**\r\n   * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param iframe\r\n   * @param timeout\r\n   */\n\n\n  SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n        _this.browserRequestLogger.warning(\"system.loadFrameTimeout or system.iframeHashTimeout set to lower (\" + timeout + \"ms) than the default (\" + DEFAULT_IFRAME_TIMEOUT_MS + \"ms). This may result in timeouts.\");\n      }\n      /*\r\n       * Polling for iframes can be purely timing based,\r\n       * since we don't need to account for interaction.\r\n       */\n\n\n      var nowMark = window.performance.now();\n      var timeoutMark = nowMark + timeout;\n      var intervalId = setInterval(function () {\n        if (window.performance.now() > timeoutMark) {\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorIframeTimeoutError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var contentWindow = iframe.contentWindow;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n        } catch (e) {}\n\n        if (StringUtils.isEmpty(href)) {\n          return;\n        }\n\n        var contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;\n\n        if (UrlString.hashContainsKnownProperties(contentHash)) {\n          // Success case\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          resolve(contentHash);\n          return;\n        }\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads iframe with authorization endpoint URL\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.loadFrame = function (urlNavigate) {\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var frameHandle = _this.createHiddenIframe();\n\n      setTimeout(function () {\n        if (!frameHandle) {\n          reject(\"Unable to load iframe\");\n          return;\n        }\n\n        frameHandle.src = urlNavigate;\n        resolve(frameHandle);\n      }, _this.navigateFrameWait);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n   * @param urlNavigate\r\n   * @param frameName\r\n   * @param logger\r\n   */\n\n\n  SilentHandler.prototype.loadFrameSync = function (urlNavigate) {\n    var frameHandle = this.createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n  };\n  /**\r\n   * @hidden\r\n   * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.createHiddenIframe = function () {\n    var authFrame = document.createElement(\"iframe\");\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n    return authFrame;\n  };\n  /**\r\n   * @hidden\r\n   * Removes a hidden iframe from the page.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.removeHiddenIframe = function (iframe) {\n    if (document.body === iframe.parentNode) {\n      document.body.removeChild(iframe);\n    }\n  };\n\n  return SilentHandler;\n}(InteractionHandler);\n\nexport { SilentHandler };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;AAYmCA;;AAG/B,yBAAYC,cAAZ,EAAqDC,WAArD,EAAuFC,eAAvF,EAAwIC,oBAAxI,EAAsKC,iBAAtK,EAA+L;AAA/L,gBACIC,kBAAML,cAAN,EAAsBC,WAAtB,EAAmCC,eAAnC,EAAoDC,oBAApD,KAAyE,IAD7E;;AAEIG,SAAI,CAACF,iBAAL,GAAyBA,iBAAzB;;AACH;;;;;;;;AAOKG,gDAAN,UAA0BC,UAA1B,EAA4C;;;;;;;AACxC,gBAAIC,WAAW,CAACC,OAAZ,CAAoBF,UAApB,CAAJ,EAAqC;;AAEjC,mBAAKL,oBAAL,CAA0BQ,IAA1B,CAA+B,uBAA/B;AACA,oBAAMC,gBAAgB,CAACC,6BAAjB,EAAN;AACH;;iBAEM,KAAKT,mBAAL;AAAA;AAAA;AAAyB;AAAA;AAAA,cAAM,KAAKU,SAAL,CAAeN,UAAf,CAAN;;;AAAAO;;;;;;AAAmCA,sBAAKC,aAAL,CAAmBR,UAAnB;;;;AAAnE;AAAA;AAAA;;;;AACH,GARK;;;;;;;;AAeND,2DAAqBU,MAArB,EAAgDC,OAAhD,EAA+D;AAA/D;;AACI,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAC/B,UAAIH,OAAO,GAAGI,yBAAd,EAAyC;AACrChB,aAAI,CAACH,oBAAL,CAA0BoB,OAA1B,CAAkC,uEAAqEL,OAArE,GAA4E,wBAA5E,GAAqGI,yBAArG,GAA8H,mCAAhK;AACH;;;;;;;AAMD,UAAME,OAAO,GAAGC,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAhB;AACA,UAAMC,WAAW,GAAGJ,OAAO,GAAGN,OAA9B;AAEA,UAAMW,UAAU,GAAGC,WAAW,CAAC;AAC3B,YAAIL,MAAM,CAACC,WAAP,CAAmBC,GAAnB,KAA2BC,WAA/B,EAA4C;AACxCtB,eAAI,CAACyB,kBAAL,CAAwBd,MAAxB;;AACAe,uBAAa,CAACH,UAAD,CAAb;AACAR,gBAAM,CAACT,gBAAgB,CAACqB,+BAAjB,EAAD,CAAN;AACA;AACH;;AAED,YAAIC,IAAI,GAAWC,SAAS,CAACC,YAA7B;AACA,YAAMC,aAAa,GAAGpB,MAAM,CAACoB,aAA7B;;AACA,YAAI;;;;;;AAMAH,cAAI,GAAGG,aAAa,GAAGA,aAAa,CAACC,QAAd,CAAuBJ,IAA1B,GAAiCC,SAAS,CAACC,YAA/D;AACH,SAPD,CAOE,OAAOG,CAAP,EAAU,CAAE;;AAEd,YAAI9B,WAAW,CAACC,OAAZ,CAAoBwB,IAApB,CAAJ,EAA+B;AAC3B;AACH;;AAED,YAAMM,WAAW,GAAGH,aAAa,GAAGA,aAAa,CAACC,QAAd,CAAuBG,IAA1B,GAAgCN,SAAS,CAACC,YAA3E;;AACA,YAAIM,SAAS,CAACC,2BAAV,CAAsCH,WAAtC,CAAJ,EAAwD;;AAEpDlC,eAAI,CAACyB,kBAAL,CAAwBd,MAAxB;;AACAe,uBAAa,CAACH,UAAD,CAAb;AACAT,iBAAO,CAACoB,WAAD,CAAP;AACA;AACH;AACJ,OA/B6B,EA+B3BI,gBAAgB,CAACC,gBA/BU,CAA9B;AAgCH,KA5CM,CAAP;AA6CH,GA9CD;;;;;;;;AAqDQtC,sCAAR,UAAkBuC,WAAlB,EAAqC;;;;;AAArC;;AAMI,WAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAC/B,UAAM0B,WAAW,GAAGzC,KAAI,CAAC0C,kBAAL,EAApB;;AAEAC,gBAAU,CAAC;AACP,YAAI,CAACF,WAAL,EAAkB;AACd1B,gBAAM,CAAC,uBAAD,CAAN;AACA;AACH;;AAED0B,mBAAW,CAACG,GAAZ,GAAkBJ,WAAlB;AAEA1B,eAAO,CAAC2B,WAAD,CAAP;AACH,OATS,EASPzC,KAAI,CAACF,iBATE,CAAV;AAUH,KAbM,CAAP;AAcH,GApBO;;;;;;;;;;AA6BAG,0CAAR,UAAsBuC,WAAtB,EAAyC;AACrC,QAAMC,WAAW,GAAG,KAAKC,kBAAL,EAApB;AAEAD,eAAW,CAACG,GAAZ,GAAkBJ,WAAlB;AAEA,WAAOC,WAAP;AACH,GANO;;;;;;;;AAaAxC,+CAAR;AACI,QAAM4C,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;AAEAF,aAAS,CAACG,KAAV,CAAgBC,UAAhB,GAA6B,QAA7B;AACAJ,aAAS,CAACG,KAAV,CAAgBE,QAAhB,GAA2B,UAA3B;AACAL,aAAS,CAACG,KAAV,CAAgBG,KAAhB,GAAwBN,SAAS,CAACG,KAAV,CAAgBI,MAAhB,GAAyB,GAAjD;AACAP,aAAS,CAACG,KAAV,CAAgBK,MAAhB,GAAyB,GAAzB;AACAR,aAAS,CAACS,YAAV,CAAuB,SAAvB,EAAkC,6CAAlC;AACAR,YAAQ,CAACS,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDX,SAArD;AAEA,WAAOA,SAAP;AACH,GAXO;;;;;;;;AAkBA5C,+CAAR,UAA2BU,MAA3B,EAAoD;AAChD,QAAImC,QAAQ,CAACW,IAAT,KAAkB9C,MAAM,CAAC+C,UAA7B,EAAyC;AACrCZ,cAAQ,CAACW,IAAT,CAAcE,WAAd,CAA0BhD,MAA1B;AACH;AACJ,GAJO;;AAKZ;AAlJA,EAAmCiD","names":["__extends","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","navigateFrameWait","_super","_this","SilentHandler","requestUrl","StringUtils","isEmpty","info","BrowserAuthError","createEmptyNavigationUriError","loadFrame","_a","loadFrameSync","iframe","timeout","Promise","resolve","reject","DEFAULT_IFRAME_TIMEOUT_MS","warning","nowMark","window","performance","now","timeoutMark","intervalId","setInterval","removeHiddenIframe","clearInterval","createMonitorIframeTimeoutError","href","Constants","EMPTY_STRING","contentWindow","location","e","contentHash","hash","UrlString","hashContainsKnownProperties","BrowserConstants","POLL_INTERVAL_MS","urlNavigate","frameHandle","createHiddenIframe","setTimeout","src","authFrame","document","createElement","style","visibility","position","width","height","border","setAttribute","getElementsByTagName","appendChild","body","parentNode","removeChild","InteractionHandler"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\SilentHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Constants, Logger } from \"@azure/msal-common\";\nimport { InteractionHandler } from \"./InteractionHandler\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\n\nexport class SilentHandler extends InteractionHandler {\n\n    private navigateFrameWait: number;\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, navigateFrameWait: number) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.navigateFrameWait = navigateFrameWait;\n    }\n\n    /**\n     * Creates a hidden iframe to given URL using user-requested scopes as an id.\n     * @param urlNavigate\n     * @param userRequestScopes\n     */\n    async initiateAuthRequest(requestUrl: string): Promise<HTMLIFrameElement> {\n        if (StringUtils.isEmpty(requestUrl)) {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n\n        return this.navigateFrameWait ? await this.loadFrame(requestUrl) : this.loadFrameSync(requestUrl);\n    }\n\n    /**\n     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n     * @param iframe\n     * @param timeout\n     */\n    monitorIframeForHash(iframe: HTMLIFrameElement, timeout: number): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n                this.browserRequestLogger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n            }\n\n            /*\n             * Polling for iframes can be purely timing based,\n             * since we don't need to account for interaction.\n             */\n            const nowMark = window.performance.now();\n            const timeoutMark = nowMark + timeout;\n\n            const intervalId = setInterval(() => {\n                if (window.performance.now() > timeoutMark) {\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createMonitorIframeTimeoutError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                const contentWindow = iframe.contentWindow;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n                } catch (e) {}\n\n                if (StringUtils.isEmpty(href)) {\n                    return;\n                }\n\n                const contentHash = contentWindow ? contentWindow.location.hash: Constants.EMPTY_STRING;\n                if (UrlString.hashContainsKnownProperties(contentHash)) {\n                    // Success case\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    resolve(contentHash);\n                    return;\n                }\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads iframe with authorization endpoint URL\n     * @ignore\n     */\n    private loadFrame(urlNavigate: string): Promise<HTMLIFrameElement> {\n        /*\n         * This trick overcomes iframe navigation in IE\n         * IE does not load the page consistently in iframe\n         */\n\n        return new Promise((resolve, reject) => {\n            const frameHandle = this.createHiddenIframe();\n\n            setTimeout(() => {\n                if (!frameHandle) {\n                    reject(\"Unable to load iframe\");\n                    return;\n                }\n\n                frameHandle.src = urlNavigate;\n\n                resolve(frameHandle);\n            }, this.navigateFrameWait);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n     * @param urlNavigate\n     * @param frameName\n     * @param logger\n     */\n    private loadFrameSync(urlNavigate: string): HTMLIFrameElement{\n        const frameHandle = this.createHiddenIframe();\n\n        frameHandle.src = urlNavigate;\n\n        return frameHandle;\n    }\n\n    /**\n     * @hidden\n     * Creates a new hidden iframe or gets an existing one for silent token renewal.\n     * @ignore\n     */\n    private createHiddenIframe(): HTMLIFrameElement {\n        const authFrame = document.createElement(\"iframe\");\n\n        authFrame.style.visibility = \"hidden\";\n        authFrame.style.position = \"absolute\";\n        authFrame.style.width = authFrame.style.height = \"0\";\n        authFrame.style.border = \"0\";\n        authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n        document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n\n        return authFrame;\n    }\n\n    /**\n     * @hidden\n     * Removes a hidden iframe from the page.\n     * @ignore\n     */\n    private removeHiddenIframe(iframe: HTMLIFrameElement): void {\n        if (document.body === iframe.parentNode) {\n            document.body.removeChild(iframe);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}