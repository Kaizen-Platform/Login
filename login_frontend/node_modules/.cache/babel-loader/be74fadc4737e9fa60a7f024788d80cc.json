{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { Authority, IdTokenEntity, AuthToken, AccountEntity, ScopeSet, AccessTokenEntity } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    if (request.account) {\n      this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n      this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata\n      };\n      var authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId, options) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n    var idAuthToken = new AuthToken(idToken, this.cryptoObj);\n    var accountEntity = options.clientInfo ? AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setAccount(accountEntity);\n      this.storage.setIdTokenCredential(idTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = response.expires_in;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"mappings":"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","names":["configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","TokenCache","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","account","loadIdToken","homeAccountId","environment","tenantId","loadAccessToken","authority","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","system","networkClient","clientInfo","trace","hostnameAndPort","tenant","client_info","idToken","idTokenEntity","IdTokenEntity","createIdTokenEntity","clientId","idAuthToken","AuthToken","accountEntity","AccountEntity","createAccount","undefined","createGenericAccount","verbose","setAccount","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\cache\\TokenCache.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string,\n    extendedExpiresOn?: number\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n\n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     */\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): void {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n        if (!response.id_token) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n        }\n\n        if (request.account) {\n            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n        } else if (request.authority) {\n\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n            const authorityOptions: AuthorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata,\n            };\n            const authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);\n\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n            } else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n            } else {\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n            }\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n        }\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @param options\n     */\n    private loadIdToken(idToken: string, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n        const idAuthToken = new AuthToken(idToken, this.cryptoObj);\n        const accountEntity = options.clientInfo ?\n            AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) :\n            AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setAccount(accountEntity);\n            this.storage.setIdTokenCredential(idTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param options\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns\n     */\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\n            return;\n        }\n\n        if (!response.expires_in) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n        }\n\n        if (!options.extendedExpiresOn) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n        }\n\n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn = response.expires_in;\n        const extendedExpiresOn = options.extendedExpiresOn;\n\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}