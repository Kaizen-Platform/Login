{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { StringUtils, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { PopupUtils } from '../utils/PopupUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\n\nvar PopupHandler =\n/** @class */\nfunction (_super) {\n  __extends(PopupHandler, _super);\n\n  function PopupHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this; // Properly sets this reference for the unload event.\n\n\n    _this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\n    return _this;\n  }\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.browserRequestLogger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.popupUtils.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.browserRequestLogger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - milliseconds until timeout\r\n   */\n\n\n  PopupHandler.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function () {\n      var contentHash = popupWindow.location.hash;\n      BrowserUtils.clearHash(popupWindow);\n\n      _this.popupUtils.cleanPopup(popupWindow);\n\n      if (!contentHash) {\n        throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\n      }\n\n      if (UrlString.hashContainsKnownProperties(contentHash)) {\n        return contentHash;\n      } else {\n        throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\n      }\n    });\n  };\n\n  return PopupHandler;\n}(InteractionHandler);\n\nexport { PopupHandler };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;AAkBA;;;;;;;;AAIkCA;;AAG9B,wBAAYC,cAAZ,EAAqDC,WAArD,EAAuFC,eAAvF,EAAwIC,oBAAxI,EAAoK;AAApK,gBACIC,kBAAMJ,cAAN,EAAsBC,WAAtB,EAAmCC,eAAnC,EAAoDC,oBAApD,KAAyE,IAD7E,CAAoK;;;AAIhKE,SAAI,CAACC,UAAL,GAAkB,IAAIC,UAAJ,CAAeN,WAAf,EAA4BE,oBAA5B,CAAlB;;AACH;;;;;;;AAMDK,yDAAoBC,UAApB,EAAwCC,MAAxC,EAA2D;;AAEvD,QAAI,CAACC,WAAW,CAACC,OAAZ,CAAoBH,UAApB,CAAL,EAAsC;AAClC,WAAKN,oBAAL,CAA0BU,OAA1B,CAAkC,kBAAgBJ,UAAlD,EADkC;;AAGlC,aAAO,KAAKH,UAAL,CAAgBQ,SAAhB,CAA0BL,UAA1B,EAAsCC,MAAtC,CAAP;AACH,KAJD,MAIO;;AAEH,WAAKP,oBAAL,CAA0BY,KAA1B,CAAgC,uBAAhC;AACA,YAAMC,gBAAgB,CAACC,6BAAjB,EAAN;AACH;AACJ,GAXD;;;;;;;;AAkBAT,yDAAoBU,WAApB,EAAuC;AAAvC;;AACI,WAAO,KAAKZ,UAAL,CAAgBa,yBAAhB,CAA0CD,WAA1C,EAAuDE,IAAvD,CAA4D;AAC/D,UAAMC,WAAW,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,IAAzC;AACAC,kBAAY,CAACC,SAAb,CAAuBP,WAAvB;;AACAb,WAAI,CAACC,UAAL,CAAgBoB,UAAhB,CAA2BR,WAA3B;;AAEA,UAAI,CAACG,WAAL,EAAkB;AACd,cAAML,gBAAgB,CAACW,oBAAjB,CAAsCT,WAAW,CAACI,QAAZ,CAAqBM,IAA3D,CAAN;AACH;;AAED,UAAIC,SAAS,CAACC,2BAAV,CAAsCT,WAAtC,CAAJ,EAAwD;AACpD,eAAOA,WAAP;AACH,OAFD,MAEO;AACH,cAAML,gBAAgB,CAACe,4CAAjB,EAAN;AACH;AACJ,KAdM,CAAP;AAgBH,GAjBD;;AAkBJ;AAlDA,EAAkCC","names":["__extends","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","_super","_this","popupUtils","PopupUtils","PopupHandler","requestUrl","params","StringUtils","isEmpty","infoPii","openPopup","error","BrowserAuthError","createEmptyNavigationUriError","popupWindow","monitorPopupForSameOrigin","then","contentHash","location","hash","BrowserUtils","clearHash","cleanPopup","createEmptyHashError","href","UrlString","hashContainsKnownProperties","createHashDoesNotContainKnownPropertiesError","InteractionHandler"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\PopupHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Logger } from \"@azure/msal-common\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { PopupWindowAttributes, PopupUtils } from \"../utils/PopupUtils\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\nexport type PopupParams = InteractionParams & {\n    popup?: Window|null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes\n};\n\n/**\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\n */\nexport class PopupHandler extends InteractionHandler {\n    private popupUtils: PopupUtils;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n\n        // Properly sets this reference for the unload event.\n        this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (!StringUtils.isEmpty(requestUrl)) {\n            this.browserRequestLogger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.popupUtils.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.error(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - milliseconds until timeout\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(() => {\n            const contentHash = popupWindow.location.hash;\n            BrowserUtils.clearHash(popupWindow);\n            this.popupUtils.cleanPopup(popupWindow);\n\n            if (!contentHash) {\n                throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\n            }\n\n            if (UrlString.hashContainsKnownProperties(contentHash)) {\n                return contentHash;\n            } else {\n                throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\n            }\n        }\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}