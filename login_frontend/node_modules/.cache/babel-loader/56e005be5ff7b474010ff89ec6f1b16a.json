{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        return [2\n        /*return*/\n        , this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","e","logger","error","errorPii"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\InteractionHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodePayload , StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger } from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\n\nexport type InteractionParams = {};\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport abstract class InteractionHandler {\n\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected browserRequestLogger: Logger;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.browserRequestLogger = browserRequestLogger;\n    }\n\n    /**\n     * Function to enable user interaction.\n     * @param requestUrl\n     */\n    abstract initiateAuthRequest(requestUrl: string, params: InteractionParams): Window | Promise<HTMLIFrameElement> | Promise<void>;\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse \n     * @param state \n     * @param authority \n     * @param networkModule \n     * @returns \n     */\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\n        this.browserRequestLogger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        \n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            authCodeResponse.nonce = cachedNonce || undefined;\n        }\n        \n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Updates authority based on cloudInstanceHostname\n     * @param cloudInstanceHostname \n     * @param authority \n     * @param networkModule \n     */\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\n        this.authModule.updateAuthority(cloudInstanceAuthority);\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}