{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage =\n/** @class */\nfunction () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n\n\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                return resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                return resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n\n\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n\n\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n\n\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n          deleteDbRequest.addEventListener(\"success\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"error\", function () {\n            return reject(false);\n          });\n        })];\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"mappings":"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","names":["dbName","DB_NAME","version","DB_VERSION","tableName","DB_TABLE_NAME","dbOpen","DatabaseStorage","Promise","resolve","reject","openDB","window","indexedDB","open","_this","addEventListener","e","event","target","result","createObjectStore","db","BrowserAuthError","createDatabaseUnavailableError","_a","key","validateDbIsOpen","createDatabaseNotOpenError","transaction","objectStore","dbGet","get","payload","dbPut","put","dbDelete","delete","dbGetKeys","getAllKeys","dbContainsKey","count","deleteDbRequest","deleteDatabase"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\cache\\DatabaseStorage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase|undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\n                const event = e as IDBOpenOnUpgradeNeededEvent;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\n        });\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key \n     * @param payload \n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => resolve());\n            dbPut.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", () => resolve());\n            dbDelete.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * \n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}