{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { StringUtils, AuthError } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: \"pkce_not_created\",\n    desc: \"The PKCE code challenge and verifier could not be generated.\"\n  },\n  cryptoDoesNotExist: {\n    code: \"crypto_nonexistent\",\n    desc: \"The crypto object or function is not available.\"\n  },\n  httpMethodNotImplementedError: {\n    code: \"http_method_not_implemented\",\n    desc: \"The HTTP method given has not been implemented in this library.\"\n  },\n  emptyNavigateUriError: {\n    code: \"empty_navigate_uri\",\n    desc: \"Navigation URI is empty. Please check stack trace for more info.\"\n  },\n  hashEmptyError: {\n    code: \"hash_empty_error\",\n    desc: \"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash.\"\n  },\n  hashDoesNotContainStateError: {\n    code: \"no_state_in_hash\",\n    desc: \"Hash does not contain state. Please verify that the request originated from msal.\"\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: \"hash_does_not_contain_known_properties\",\n    desc: \"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.\"\n  },\n  unableToParseStateError: {\n    code: \"unable_to_parse_state\",\n    desc: \"Unable to parse state. Please verify that the request originated from msal.\"\n  },\n  stateInteractionTypeMismatchError: {\n    code: \"state_interaction_type_mismatch\",\n    desc: \"Hash contains state but the interaction type does not match the caller.\"\n  },\n  interactionInProgress: {\n    code: \"interaction_in_progress\",\n    desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  popupWindowError: {\n    code: \"popup_window_error\",\n    desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\n  },\n  emptyWindowError: {\n    code: \"empty_window_error\",\n    desc: \"window.open returned null or undefined window object.\"\n  },\n  userCancelledError: {\n    code: \"user_cancelled\",\n    desc: \"User cancelled the flow.\"\n  },\n  monitorPopupTimeoutError: {\n    code: \"monitor_window_timeout\",\n    desc: \"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  monitorIframeTimeoutError: {\n    code: \"monitor_window_timeout\",\n    desc: \"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n  },\n  redirectInIframeError: {\n    code: \"redirect_in_iframe\",\n    desc: \"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\"\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: \"block_iframe_reload\",\n    desc: \"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors\"\n  },\n  blockAcquireTokenInPopupsError: {\n    code: \"block_nested_popups\",\n    desc: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\"\n  },\n  iframeClosedPrematurelyError: {\n    code: \"iframe_closed_prematurely\",\n    desc: \"The iframe being monitored was closed prematurely.\"\n  },\n  silentLogoutUnsupportedError: {\n    code: \"silent_logout_unsupported\",\n    desc: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\"\n  },\n  noAccountError: {\n    code: \"no_account_error\",\n    desc: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\"\n  },\n  silentPromptValueError: {\n    code: \"silent_prompt_value_error\",\n    desc: \"The value given for the prompt value is not valid for silent requests - must be set to 'none'.\"\n  },\n  noTokenRequestCacheError: {\n    code: \"no_token_request_cache_error\",\n    desc: \"No token request found in cache.\"\n  },\n  unableToParseTokenRequestCacheError: {\n    code: \"unable_to_parse_token_request_cache_error\",\n    desc: \"The cached token request could not be parsed.\"\n  },\n  noCachedAuthorityError: {\n    code: \"no_cached_authority_error\",\n    desc: \"No cached authority found.\"\n  },\n  authRequestNotSet: {\n    code: \"auth_request_not_set_error\",\n    desc: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  notInBrowserEnvironment: {\n    code: \"non_browser_environment\",\n    desc: \"Login and token requests are not supported in non-browser environments.\"\n  },\n  databaseNotOpen: {\n    code: \"database_not_open\",\n    desc: \"Database is not open!\"\n  },\n  noNetworkConnectivity: {\n    code: \"no_network_connectivity\",\n    desc: \"No network connectivity. Check your internet connection.\"\n  },\n  postRequestFailed: {\n    code: \"post_request_failed\",\n    desc: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\"\n  },\n  getRequestFailed: {\n    code: \"get_request_failed\",\n    desc: \"Network request failed. Please check the network trace to determine root cause.\"\n  },\n  failedToParseNetworkResponse: {\n    code: \"failed_to_parse_response\",\n    desc: \"Failed to parse network response. Check network trace.\"\n  },\n  unableToLoadTokenError: {\n    code: \"unable_to_load_token\",\n    desc: \"Error loading token to cache.\"\n  },\n  signingKeyNotFoundInStorage: {\n    code: \"crypto_key_not_found\",\n    desc: \"Cryptographic Key or Keypair not found in browser storage.\"\n  },\n  authCodeRequired: {\n    code: \"auth_code_required\",\n    desc: \"An authorization code must be provided (as the `code` property on the request) to this flow.\"\n  },\n  databaseUnavailable: {\n    code: \"database_unavailable\",\n    desc: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\"\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\n\nvar BrowserAuthError =\n/** @class */\nfunction (_super) {\n  __extends(BrowserAuthError, _super);\n\n  function BrowserAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    Object.setPrototypeOf(_this, BrowserAuthError.prototype);\n    _this.name = \"BrowserAuthError\";\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when PKCE is not implemented.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + \" Detail:\" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the crypto object is unavailable.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + \" Detail:\" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\r\n   * @param method\r\n   */\n\n\n  BrowserAuthError.createHttpMethodNotImplementedError = function (method) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + \" Given Method: \" + method);\n  };\n  /**\r\n   * Creates an error thrown when the navigation URI is empty.\r\n   */\n\n\n  BrowserAuthError.createEmptyNavigationUriError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   * @param hashValue\r\n   */\n\n\n  BrowserAuthError.createEmptyHashError = function (hashValue) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + \" Given Url: \" + hashValue);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   */\n\n\n  BrowserAuthError.createHashDoesNotContainStateError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value does not contain known properties\r\n   */\n\n\n  BrowserAuthError.createHashDoesNotContainKnownPropertiesError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the hash string value is unexpectedly empty.\r\n   */\n\n\n  BrowserAuthError.createUnableToParseStateError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.\r\n   */\n\n\n  BrowserAuthError.createStateInteractionTypeMismatchError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\r\n   */\n\n\n  BrowserAuthError.createInteractionInProgressError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\n  };\n  /**\r\n   * Creates an error thrown when the popup window could not be opened.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createPopupWindowError = function (errDetail) {\n    var errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;\n    errorMessage = !StringUtils.isEmpty(errDetail) ? errorMessage + \" Details: \" + errDetail : errorMessage;\n    return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);\n  };\n  /**\r\n   * Creates an error thrown when window.open returns an empty window object.\r\n   * @param errDetail\r\n   */\n\n\n  BrowserAuthError.createEmptyWindowCreatedError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the user closes a popup.\r\n   */\n\n\n  BrowserAuthError.createUserCancelledError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);\n  };\n  /**\r\n   * Creates an error thrown when monitorPopupFromHash times out for a given popup.\r\n   */\n\n\n  BrowserAuthError.createMonitorPopupTimeoutError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);\n  };\n  /**\r\n   * Creates an error thrown when monitorIframeFromHash times out for a given iframe.\r\n   */\n\n\n  BrowserAuthError.createMonitorIframeTimeoutError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);\n  };\n  /**\r\n   * Creates an error thrown when navigateWindow is called inside an iframe.\r\n   * @param windowParentCheck\r\n   */\n\n\n  BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + \" (window.parent !== window) => \" + windowParentCheck);\n  };\n  /**\r\n   * Creates an error thrown when an auth reload is done inside an iframe.\r\n   */\n\n\n  BrowserAuthError.createBlockReloadInHiddenIframeError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a popup attempts to call an acquireToken API\r\n   * @returns\r\n   */\n\n\n  BrowserAuthError.createBlockAcquireTokenInPopupsError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);\n  };\n  /**\r\n   * Creates an error thrown when an iframe is found to be closed before the timeout is reached.\r\n   */\n\n\n  BrowserAuthError.createIframeClosedPrematurelyError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the logout API is called on any of the silent interaction clients\r\n   */\n\n\n  BrowserAuthError.createSilentLogoutUnsupportedError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.\r\n   */\n\n\n  BrowserAuthError.createNoAccountError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);\n  };\n  /**\r\n   * Creates an error thrown when a given prompt value is invalid for silent requests.\r\n   */\n\n\n  BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + \" Given value: \" + givenPrompt);\n  };\n  /**\r\n   * Creates an error thrown when the cached token request could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the token request could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createNoTokenRequestCacheError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);\n  };\n  /**\r\n   * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)\r\n   */\n\n\n  BrowserAuthError.createAuthRequestNotSetError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the authority could not be retrieved from the cache\r\n   */\n\n\n  BrowserAuthError.createNoCachedAuthorityError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);\n  };\n  /**\r\n   * Creates an error thrown if cache type is invalid.\r\n   */\n\n\n  BrowserAuthError.createInvalidCacheTypeError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, \"\" + BrowserAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Create an error thrown when login and token requests are made from a non-browser environment\r\n   */\n\n\n  BrowserAuthError.createNonBrowserEnvironmentError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);\n  };\n  /**\r\n   * Create an error thrown when indexDB database is not open\r\n   */\n\n\n  BrowserAuthError.createDatabaseNotOpenError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);\n  };\n  /**\r\n   * Create an error thrown when token fetch fails due to no internet\r\n   */\n\n\n  BrowserAuthError.createNoNetworkConnectivityError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);\n  };\n  /**\r\n   * Create an error thrown when token fetch fails due to reasons other than internet connectivity\r\n   */\n\n\n  BrowserAuthError.createPostRequestFailedError = function (errorDesc, endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + \" | Network client threw: \" + errorDesc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Create an error thrown when get request fails due to reasons other than internet connectivity\r\n   */\n\n\n  BrowserAuthError.createGetRequestFailedError = function (errorDesc, endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + \" | Network client threw: \" + errorDesc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Create an error thrown when network client fails to parse network response\r\n   */\n\n\n  BrowserAuthError.createFailedToParseNetworkResponseError = function (endpoint) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Create an error thrown when the necessary information is not available to sideload tokens\r\n   */\n\n\n  BrowserAuthError.createUnableToLoadTokenError = function (errorDetail) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.unableToLoadTokenError.code, BrowserAuthErrorMessage.unableToLoadTokenError.desc + \" | \" + errorDetail);\n  };\n  /**\r\n   * Create an error thrown when the queried cryptographic key is not found in IndexedDB\r\n   */\n\n\n  BrowserAuthError.createSigningKeyNotFoundInStorageError = function (keyId) {\n    return new BrowserAuthError(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc + \" | No match found for KeyId: \" + keyId);\n  };\n  /**\r\n   * Create an error when an authorization code is required but not provided\r\n   */\n\n\n  BrowserAuthError.createAuthCodeRequiredError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);\n  };\n  /**\r\n   * Create an error when IndexedDB is unavailable\r\n   */\n\n\n  BrowserAuthError.createDatabaseUnavailableError = function () {\n    return new BrowserAuthError(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);\n  };\n\n  return BrowserAuthError;\n}(AuthError);\n\nexport { BrowserAuthError, BrowserAuthErrorMessage };","map":{"version":3,"mappings":"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","names":["BrowserAuthErrorMessage","pkceNotGenerated","code","desc","cryptoDoesNotExist","httpMethodNotImplementedError","emptyNavigateUriError","hashEmptyError","hashDoesNotContainStateError","hashDoesNotContainKnownPropertiesError","unableToParseStateError","stateInteractionTypeMismatchError","interactionInProgress","popupWindowError","emptyWindowError","userCancelledError","monitorPopupTimeoutError","monitorIframeTimeoutError","redirectInIframeError","blockTokenRequestsInHiddenIframeError","blockAcquireTokenInPopupsError","iframeClosedPrematurelyError","silentLogoutUnsupportedError","noAccountError","silentPromptValueError","noTokenRequestCacheError","unableToParseTokenRequestCacheError","noCachedAuthorityError","authRequestNotSet","invalidCacheType","notInBrowserEnvironment","databaseNotOpen","noNetworkConnectivity","postRequestFailed","getRequestFailed","failedToParseNetworkResponse","unableToLoadTokenError","signingKeyNotFoundInStorage","authCodeRequired","databaseUnavailable","__extends","errorCode","errorMessage","_super","Object","setPrototypeOf","_this","BrowserAuthError","prototype","name","errDetail","method","hashValue","StringUtils","isEmpty","windowParentCheck","givenPrompt","errorDesc","endpoint","split","errorDetail","keyId","AuthError"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\error\\BrowserAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError, StringUtils } from \"@azure/msal-common\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: \"pkce_not_created\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\"\n    },\n    cryptoDoesNotExist: {\n        code: \"crypto_nonexistent\",\n        desc: \"The crypto object or function is not available.\"\n    },\n    httpMethodNotImplementedError: {\n        code: \"http_method_not_implemented\",\n        desc: \"The HTTP method given has not been implemented in this library.\"\n    },\n    emptyNavigateUriError: {\n        code: \"empty_navigate_uri\",\n        desc: \"Navigation URI is empty. Please check stack trace for more info.\"\n    },\n    hashEmptyError: {\n        code: \"hash_empty_error\",\n        desc: \"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash.\"\n    },\n    hashDoesNotContainStateError: {\n        code: \"no_state_in_hash\",\n        desc: \"Hash does not contain state. Please verify that the request originated from msal.\"\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: \"hash_does_not_contain_known_properties\",\n        desc: \"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.\"\n    },\n    unableToParseStateError: {\n        code: \"unable_to_parse_state\",\n        desc: \"Unable to parse state. Please verify that the request originated from msal.\"\n    },\n    stateInteractionTypeMismatchError: {\n        code: \"state_interaction_type_mismatch\",\n        desc: \"Hash contains state but the interaction type does not match the caller.\"\n    },\n    interactionInProgress: {\n        code: \"interaction_in_progress\",\n        desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    popupWindowError: {\n        code: \"popup_window_error\",\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\n    },\n    emptyWindowError: {\n        code: \"empty_window_error\",\n        desc: \"window.open returned null or undefined window object.\"\n    },\n    userCancelledError: {\n        code: \"user_cancelled\",\n        desc: \"User cancelled the flow.\"\n    },\n    monitorPopupTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    monitorIframeTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    redirectInIframeError: {\n        code: \"redirect_in_iframe\",\n        desc: \"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\"\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: \"block_iframe_reload\",\n        desc: \"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors\"\n    },\n    blockAcquireTokenInPopupsError: {\n        code: \"block_nested_popups\",\n        desc: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\"\n    },\n    iframeClosedPrematurelyError: {\n        code: \"iframe_closed_prematurely\",\n        desc: \"The iframe being monitored was closed prematurely.\"\n    },\n    silentLogoutUnsupportedError: {\n        code: \"silent_logout_unsupported\",\n        desc: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\"\n    },\n    noAccountError: {\n        code: \"no_account_error\",\n        desc: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\"\n    },\n    silentPromptValueError: {\n        code: \"silent_prompt_value_error\",\n        desc: \"The value given for the prompt value is not valid for silent requests - must be set to 'none'.\"\n    },\n    noTokenRequestCacheError: {\n        code: \"no_token_request_cache_error\",\n        desc: \"No token request found in cache.\"\n    },\n    unableToParseTokenRequestCacheError: {\n        code: \"unable_to_parse_token_request_cache_error\",\n        desc: \"The cached token request could not be parsed.\"\n    },\n    noCachedAuthorityError: {\n        code: \"no_cached_authority_error\",\n        desc: \"No cached authority found.\"\n    },\n    authRequestNotSet: {\n        code: \"auth_request_not_set_error\",\n        desc: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    notInBrowserEnvironment: {\n        code: \"non_browser_environment\",\n        desc: \"Login and token requests are not supported in non-browser environments.\"\n    },\n    databaseNotOpen: {\n        code: \"database_not_open\",\n        desc: \"Database is not open!\"\n    },\n    noNetworkConnectivity: {\n        code: \"no_network_connectivity\",\n        desc: \"No network connectivity. Check your internet connection.\"\n    },\n    postRequestFailed: {\n        code: \"post_request_failed\",\n        desc: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\"\n    },\n    getRequestFailed: {\n        code: \"get_request_failed\",\n        desc: \"Network request failed. Please check the network trace to determine root cause.\"\n    },\n    failedToParseNetworkResponse: {\n        code: \"failed_to_parse_response\",\n        desc: \"Failed to parse network response. Check network trace.\"\n    },\n    unableToLoadTokenError: {\n        code: \"unable_to_load_token\",\n        desc: \"Error loading token to cache.\"\n    },\n    signingKeyNotFoundInStorage: {\n        code: \"crypto_key_not_found\",\n        desc: \"Cryptographic Key or Keypair not found in browser storage.\"\n    },\n    authCodeRequired: {\n        code: \"auth_code_required\",\n        desc: \"An authorization code must be provided (as the `code` property on the request) to this flow.\"\n    },\n    databaseUnavailable: {\n        code: \"database_unavailable\",\n        desc: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\"\n    }\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n\n    /**\n     * Creates an error thrown when PKCE is not implemented.\n     * @param errDetail \n     */\n    static createPkceNotGeneratedError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code,\n            `${BrowserAuthErrorMessage.pkceNotGenerated.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the crypto object is unavailable.\n     * @param errDetail \n     */\n    static createCryptoNotAvailableError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code,\n            `${BrowserAuthErrorMessage.cryptoDoesNotExist.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\n     * @param method \n     */\n    static createHttpMethodNotImplementedError(method: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code,\n            `${BrowserAuthErrorMessage.httpMethodNotImplementedError.desc} Given Method: ${method}`);\n    }\n\n    /**\n     * Creates an error thrown when the navigation URI is empty.\n     */\n    static createEmptyNavigationUriError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     * @param hashValue \n     */\n    static createEmptyHashError(hashValue: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, `${BrowserAuthErrorMessage.hashEmptyError.desc} Given Url: ${hashValue}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createHashDoesNotContainStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value does not contain known properties\n     */\n    static createHashDoesNotContainKnownPropertiesError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createUnableToParseStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.\n     */\n    static createStateInteractionTypeMismatchError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\n     */\n    static createInteractionInProgressError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\n    }\n\n    /**\n     * Creates an error thrown when the popup window could not be opened.\n     * @param errDetail \n     */\n    static createPopupWindowError(errDetail?: string): BrowserAuthError {\n        let errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;\n        errorMessage = !StringUtils.isEmpty(errDetail) ? `${errorMessage} Details: ${errDetail}` : errorMessage;\n        return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);\n    }\n\n    /**\n     * Creates an error thrown when window.open returns an empty window object.\n     * @param errDetail \n     */\n    static createEmptyWindowCreatedError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the user closes a popup.\n     */\n    static createUserCancelledError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code,\n            BrowserAuthErrorMessage.userCancelledError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorPopupFromHash times out for a given popup.\n     */\n    static createMonitorPopupTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code,\n            BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.\n     */\n    static createMonitorIframeTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code,\n            BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when navigateWindow is called inside an iframe.\n     * @param windowParentCheck \n     */\n    static createRedirectInIframeError(windowParentCheck: boolean): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, \n            `${BrowserAuthErrorMessage.redirectInIframeError.desc} (window.parent !== window) => ${windowParentCheck}`);\n    }\n\n    /**\n     * Creates an error thrown when an auth reload is done inside an iframe.\n     */\n    static createBlockReloadInHiddenIframeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code,\n            BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a popup attempts to call an acquireToken API\n     * @returns \n     */\n    static createBlockAcquireTokenInPopupsError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, \n            BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);\n    }\n\n    /**\n     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.\n     */\n    static createIframeClosedPrematurelyError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the logout API is called on any of the silent interaction clients\n     */\n    static createSilentLogoutUnsupportedError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.\n     */\n    static createNoAccountError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a given prompt value is invalid for silent requests.\n     */\n    static createSilentPromptValueError(givenPrompt: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, `${BrowserAuthErrorMessage.silentPromptValueError.desc} Given value: ${givenPrompt}`);\n    }\n\n    /**\n     * Creates an error thrown when the cached token request could not be retrieved from the cache\n     */\n    static createUnableToParseTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the token request could not be retrieved from the cache\n     */\n    static createNoTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.noTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)\n     */\n    static createAuthRequestNotSetError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code,\n            BrowserAuthErrorMessage.authRequestNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the authority could not be retrieved from the cache\n     */\n    static createNoCachedAuthorityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code,\n            BrowserAuthErrorMessage.noCachedAuthorityError.desc);\n    }\n\n    /**\n     * Creates an error thrown if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, `${BrowserAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Create an error thrown when login and token requests are made from a non-browser environment\n     */\n    static createNonBrowserEnvironmentError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);\n    }\n\n    /**\n     * Create an error thrown when indexDB database is not open\n     */\n    static createDatabaseNotOpenError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to no internet\n     */\n    static createNoNetworkConnectivityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to reasons other than internet connectivity\n     */\n    static createPostRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, `${BrowserAuthErrorMessage.postRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when get request fails due to reasons other than internet connectivity\n     */\n    static createGetRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, `${BrowserAuthErrorMessage.getRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when network client fails to parse network response\n     */\n    static createFailedToParseNetworkResponseError(endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, `${BrowserAuthErrorMessage.failedToParseNetworkResponse.desc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when the necessary information is not available to sideload tokens \n     */\n    static createUnableToLoadTokenError(errorDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToLoadTokenError.code, `${BrowserAuthErrorMessage.unableToLoadTokenError.desc} | ${errorDetail}`);\n    }\n  \n    /**\n     * Create an error thrown when the queried cryptographic key is not found in IndexedDB\n     */\n    static createSigningKeyNotFoundInStorageError(keyId: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, `${BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc} | No match found for KeyId: ${keyId}`);\n    }\n\n    /**\n     * Create an error when an authorization code is required but not provided\n     */\n    static createAuthCodeRequiredError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);\n    }\n\n    /**\n     * Create an error when IndexedDB is unavailable\n     */\n    static createDatabaseUnavailableError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}