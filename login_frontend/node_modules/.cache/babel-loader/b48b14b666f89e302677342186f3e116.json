{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\n\nvar FetchClient =\n/** @class */\nfunction () {\n  function FetchClient() {}\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.GET,\n              headers: this.getFetchHeaders(options)\n            })];\n\n          case 1:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_1 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createGetRequestFailedError(e_1, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 4:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 5:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqBody, response, e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reqBody = options && options.body || \"\";\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.POST,\n              headers: this.getFetchHeaders(options),\n              body: reqBody\n            })];\n\n          case 2:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_3 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createPostRequestFailedError(e_3, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 5:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 6:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n\n\n  FetchClient.prototype.getFetchHeaders = function (options) {\n    var headers = new Headers();\n\n    if (!(options && options.headers)) {\n      return headers;\n    }\n\n    var optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(function (key) {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  };\n\n  FetchClient.prototype.getHeaderDict = function (headers) {\n    var headerDict = {};\n    headers.forEach(function (value, key) {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  };\n\n  return FetchClient;\n}();\n\nexport { FetchClient };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;AASA;;;;;;;AAGA,0BA4FC;;;;;;;;;AApFSA,8CAAN,UAA6BC,GAA7B,EAA0CC,OAA1C,EAAyE;;;;;;;;;AAGtD;AAAA;AAAA,cAAMC,KAAK,CAACF,GAAD,EAAM;AACxBG,oBAAM,EAAEC,iBAAiB,CAACC,GADF;AAExBC,qBAAO,EAAE,KAAKC,eAAL,CAAqBN,OAArB;AAFe,aAAN,CAAX;;;AAAXO,oBAAQ,GAAGC,SAAX;;;;;;;;AAKA,gBAAIC,MAAM,CAACC,SAAP,CAAiBC,MAArB,EAA6B;AACzB,oBAAMC,gBAAgB,CAACC,2BAAjB,CAA6CC,GAA7C,EAAgDf,GAAhD,CAAN;AACH,aAFD,MAEO;AACH,oBAAMa,gBAAgB,CAACG,gCAAjB,EAAN;AACH;;;;;;AAKGV,qBAAO,EAAE,KAAKW,aAAL,CAAmBT,QAAQ,CAACF,OAA5B;;AACH;AAAA;AAAA,cAAME,QAAQ,CAACU,IAAT,EAAN;;;AAFV;AAAA;AAAA,eAEIC,UAAMV,SAAN,EACAU,YAAQX,QAAQ,CAACY,MADjB,IAFJ;;;;;AAMA,kBAAMP,gBAAgB,CAACQ,uCAAjB,CAAyDrB,GAAzD,CAAN;;;;;;;;;AAEP,GAxBK;;;;;;;;;AAgCAD,+CAAN,UAA8BC,GAA9B,EAA2CC,OAA3C,EAA0E;;;;;;;AAChEqB,mBAAO,GAAIrB,OAAO,IAAIA,OAAO,CAACsB,IAApB,IAA6B,EAAvC;;;;;;AAIS;AAAA;AAAA,cAAMrB,KAAK,CAACF,GAAD,EAAM;AACxBG,oBAAM,EAAEC,iBAAiB,CAACoB,IADF;AAExBlB,qBAAO,EAAE,KAAKC,eAAL,CAAqBN,OAArB,CAFe;AAGxBsB,kBAAI,EAAED;AAHkB,aAAN,CAAX;;;AAAXd,oBAAQ,GAAGC,SAAX;;;;;;;;AAMA,gBAAIC,MAAM,CAACC,SAAP,CAAiBC,MAArB,EAA6B;AACzB,oBAAMC,gBAAgB,CAACY,4BAAjB,CAA8CC,GAA9C,EAAiD1B,GAAjD,CAAN;AACH,aAFD,MAEO;AACH,oBAAMa,gBAAgB,CAACG,gCAAjB,EAAN;AACH;;;;;;AAKGV,qBAAO,EAAE,KAAKW,aAAL,CAAmBT,QAAQ,CAACF,OAA5B;;AACH;AAAA;AAAA,cAAME,QAAQ,CAACU,IAAT,EAAN;;;AAFV;AAAA;AAAA,eAEIC,UAAMV,SAAN,EACAU,YAAQX,QAAQ,CAACY,MADjB,IAFJ;;;;;AAMA,kBAAMP,gBAAgB,CAACQ,uCAAjB,CAAyDrB,GAAzD,CAAN;;;;;;;;;AAEP,GA3BK;;;;;;;AAiCED,0CAAR,UAAwBE,OAAxB,EAAuD;AACnD,QAAMK,OAAO,GAAG,IAAIqB,OAAJ,EAAhB;;AACA,QAAI,EAAE1B,OAAO,IAAIA,OAAO,CAACK,OAArB,CAAJ,EAAmC;AAC/B,aAAOA,OAAP;AACH;;AACD,QAAMsB,cAAc,GAAG3B,OAAO,CAACK,OAA/B;AACAuB,UAAM,CAACC,IAAP,CAAYF,cAAZ,EAA4BG,OAA5B,CAAoC,UAACC,GAAD,EAAI;AACpC1B,aAAO,CAAC2B,MAAR,CAAeD,GAAf,EAAoBJ,cAAc,CAACI,GAAD,CAAlC;AACH,KAFD;AAGA,WAAO1B,OAAP;AACH,GAVO;;AAYAP,wCAAR,UAAsBO,OAAtB,EAAsC;AAClC,QAAM4B,UAAU,GAA2B,EAA3C;AACA5B,WAAO,CAACyB,OAAR,CAAgB,UAACI,KAAD,EAAgBH,GAAhB,EAA2B;AACvCE,gBAAU,CAACF,GAAD,CAAV,GAAkBG,KAAlB;AACH,KAFD;AAGA,WAAOD,UAAP;AACH,GANO;;AAOZ;AAAC","names":["FetchClient","url","options","fetch","method","HTTP_REQUEST_TYPE","GET","headers","getFetchHeaders","response","_b","window","navigator","onLine","BrowserAuthError","createGetRequestFailedError","e_1","createNoNetworkConnectivityError","getHeaderDict","json","_a","status","createFailedToParseNetworkResponseError","reqBody","body","POST","createPostRequestFailedError","e_3","Headers","optionsHeaders","Object","keys","forEach","key","append","headerDict","value"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\network\\FetchClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchClient implements INetworkModule {\n\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options)\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw BrowserAuthError.createGetRequestFailedError(e, url);\n            } else {\n                throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: await response.json() as T,\n                status: response.status\n            };\n        } catch (e) {\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n        }\n    }\n\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        const reqBody = (options && options.body) || \"\";\n\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw BrowserAuthError.createPostRequestFailedError(e, url);\n            } else {\n                throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: await response.json() as T,\n                status: response.status\n            };\n        } catch (e) {\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n        }\n    }\n\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders \n     */\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n\n    private getHeaderDict(headers: Headers): Record<string, string> {\n        const headerDict: Record<string, string> = {};\n        headers.forEach((value: string, key: string) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}