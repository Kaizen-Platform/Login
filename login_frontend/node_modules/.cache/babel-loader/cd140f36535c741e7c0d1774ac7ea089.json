{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\n\nvar UrlString =\n/** @class */\nfunction () {\n  function UrlString(url) {\n    this._urlString = url;\n\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n\n      return lowerCaseUrl;\n    }\n\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n\n\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    } // Throw error if URI or path segments are not parseable.\n\n\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Throw error if uri is insecure.\n\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n\n\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n\n\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n\n\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n\n\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n\n\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"); // If url string does not match regEx, we throw an error\n\n    var match = this.urlString.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Url component object\n\n\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n\n    urlComponents.PathSegments = pathSegments;\n\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n\n    return urlComponents;\n  };\n\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\n    }\n\n    return match[2];\n  };\n\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n\n\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n\n    return \"\";\n  };\n\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n\n\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    } // Strip the # symbol if present\n\n\n    var parsedHash = UrlString.parseHash(hash); // If # symbol was not present, above will return empty string, so give original hash value\n\n    var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash); // Check if deserialization didn't work\n\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n\n    return deserializedHash;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n\n\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n\n  return UrlString;\n}();\n\nexport { UrlString };","map":{"version":3,"mappings":"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","names":["url","_urlString","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError","getHash","UrlString","canonicalizeUri","Object","lowerCaseUrl","toLowerCase","endsWith","slice","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","queryString","indexOf","split","tenantId","urlObject","pathArray","length","AADAuthorityConstants","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","relativeUrl","baseUrl","Constants","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","join","hash","parsedHash","deserializedHash","queryStringToObject","ClientAuthError","createHashNotDeserializedError","JSON","stringify","parameters","getDeserializedHash","code","error_description","error","state"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\url\\UrlString.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IUri } from \"./IUri\";\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\n\n/**\n * Url object class which can perform various transformations on url strings.\n */\nexport class UrlString {\n\n    // internal url string field\n    private _urlString: string;\n    public get urlString(): string {\n        return this._urlString;\n    }\n\n    constructor(url: string) {\n        this._urlString = url;\n        if (StringUtils.isEmpty(this._urlString)) {\n            // Throws error if url is empty\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        if (StringUtils.isEmpty(this.getHash())) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url\n     */\n    static canonicalizeUri(url: string): string {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n\n            return lowerCaseUrl;\n        }\n\n        return url;\n    }\n\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri(): void {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw ClientConfigurationError.createUrlParseError(e);\n        }\n\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Throw error if uri is insecure.\n        if(!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n        }\n    }\n\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url\n     * @param queryString\n     */\n    static appendQueryString(url: string, queryString: string): string {\n        if (StringUtils.isEmpty(queryString)) {\n            return url;\n        }\n\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n\n    /**\n     * Returns a url with the hash removed\n     * @param url\n     */\n    static removeHashFromUrl(url: string): string {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId: string): UrlString {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n\n    /**\n     * Returns the anchor part(#) of the URL\n     */\n    getHash(): string {\n        return UrlString.parseHash(this.urlString);\n    }\n\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents(): IUri {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        } as IUri;\n\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length-1);\n        }\n        return urlComponents;\n    }\n\n    static getDomainFromUrl(url: string): string {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n\n        const match = url.match(regEx);\n\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\n        }\n\n        return match[2];\n    }\n\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n\n        return relativeUrl;\n    }\n\n    /**\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\n     * @param hashString\n     */\n    static parseHash(hashString: string): string {\n        const hashIndex1 = hashString.indexOf(\"#\");\n        const hashIndex2 = hashString.indexOf(\"#/\");\n        if (hashIndex2 > -1) {\n            return hashString.substring(hashIndex2 + 2);\n        } else if (hashIndex1 > -1) {\n            return hashString.substring(hashIndex1 + 1);\n        }\n        return \"\";\n    }\n\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n\n    /**\n     * Returns URL hash as server auth code response object.\n     */\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\n        // Check if given hash is empty\n        if (StringUtils.isEmpty(hash)) {\n            return {};\n        }\n        // Strip the # symbol if present\n        const parsedHash = UrlString.parseHash(hash);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n        // Check if deserialization didn't work\n        if (!deserializedHash) {\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n        }\n        return deserializedHash;\n    }\n\n    /**\n     * Check if the hash of the URL string contains known properties\n     */\n    static hashContainsKnownProperties(hash: string): boolean {\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n            // Hash doesn't contain key/value pairs\n            return false;\n        }\n\n        const parameters: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        return !!(\n            parameters.code ||\n            parameters.error_description ||\n            parameters.error ||\n            parameters.state\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}