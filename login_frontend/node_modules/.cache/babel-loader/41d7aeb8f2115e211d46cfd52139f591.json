{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { SilentFlowClient } from '@azure/msal-common';\nimport { EventType } from '../event/EventType.js';\nimport { InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentCacheClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentCacheClient, _super);\n\n  function SilentCacheClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n\n\n  SilentCacheClient.prototype.acquireToken = function (silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, silentAuthClient, cachedToken, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 1:\n            silentAuthClient = _a.sent();\n            this.logger.verbose(\"Silent auth client created\");\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , silentAuthClient.acquireCachedToken(silentRequest)];\n\n          case 3:\n            cachedToken = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return [2\n            /*return*/\n            , cachedToken];\n\n          case 4:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof BrowserAuthError && error_1.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n              this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentCacheClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates an Silent Flow Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new SilentFlowClient(clientConfig)];\n        }\n      });\n    });\n  };\n\n  SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            }])];\n        }\n      });\n    });\n  };\n\n  return SilentCacheClient;\n}(StandardInteractionClient);\n\nexport { SilentCacheClient };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;AAYuCA;;AAAvC;;AAmDC;;;;;;;AA9CSC,6CAAN,UAAmBC,aAAnB,EAAyD;;;;;;AAE/CC,kCAAsB,GAAG,KAAKC,gCAAL,CAAsCC,KAAK,CAACC,6BAA5C,CAAzB;AAEmB;AAAA;AAAA,cAAM,KAAKC,sBAAL,CAA4BJ,sBAA5B,EAAoDD,aAAa,CAACM,SAAlE,EAA6EN,aAAa,CAACO,iBAA3F,CAAN;;;AAAnBC,4BAAgB,GAAGC,SAAnB;AACN,iBAAKC,MAAL,CAAYC,OAAZ,CAAoB,4BAApB;;;;;;AAGwB;AAAA;AAAA,cAAMH,gBAAgB,CAACI,kBAAjB,CAAoCZ,aAApC,CAAN;;;AAAda,uBAAW,GAAGJ,SAAd;AACN,iBAAKK,YAAL,CAAkBC,SAAlB,CAA4BC,SAAS,CAACC,qBAAtC,EAA6DC,eAAe,CAACC,MAA7E,EAAqFN,WAArF;AACA;AAAA;AAAA,cAAOA,WAAP;;;;;AAEA,gBAAIO,OAAK,YAAYC,gBAAjB,IAAqCD,OAAK,CAACE,SAAN,KAAoBC,uBAAuB,CAACC,2BAAxB,CAAoDC,IAAjH,EAAuH;AACnH,mBAAKf,MAAL,CAAYC,OAAZ,CAAoB,sHAApB;AACH;;AACD,kBAAMS,OAAN;;;;;;;;;AAEP,GAjBK;;;;;;AAsBNrB;;AAEI,WAAO2B,OAAO,CAACC,MAAR,CAAeN,gBAAgB,CAACO,kCAAjB,EAAf,CAAP;AACH,GAHD;;;;;;;;AAUgB7B,uDAAhB,UAAuCE,sBAAvC,EAAuF4B,YAAvF,EAA8GtB,iBAA9G,EAAmJ;;;;;;AAE1H;AAAA;AAAA,cAAM,KAAKuB,sBAAL,CAA4B7B,sBAA5B,EAAoD4B,YAApD,EAAkEtB,iBAAlE,CAAN;;;AAAfwB,wBAAY,GAAGtB,SAAf;AACN;AAAA;AAAA,cAAO,IAAIuB,gBAAJ,CAAqBD,YAArB,CAAP;;;;AACH,GAJe;;AAMVhC,wDAAN,UAA8BkC,OAA9B,EAAsDC,OAAtD,EAA0E;;;;;;;+BAE/DD;AACA;AAAA;AAAA,cAAM,KAAKE,qBAAL,CAA2BF,OAA3B,CAAN;;;AAFP;AAAA;AAAA,wEAEOG,SAFP,KAEgD;AAC5CF,qBAAO,EAAEA,OADmC;AAE5CG,0BAAY,EAAEJ,OAAO,CAACI,YAAR,IAAwB;AAFM,aAFhD;;;;AAMH,GAPK;;AAQV;AAnDA,EAAuCC","names":["__extends","SilentCacheClient","silentRequest","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createSilentFlowClient","authority","azureCloudOptions","silentAuthClient","_a","logger","verbose","acquireCachedToken","cachedToken","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_SUCCESS","InteractionType","Silent","error_1","BrowserAuthError","errorCode","BrowserAuthErrorMessage","signingKeyNotFoundInStorage","code","Promise","reject","createSilentLogoutUnsupportedError","authorityUrl","getClientConfiguration","clientConfig","SilentFlowClient","request","account","initializeBaseRequest","_b","forceRefresh","StandardInteractionClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentCacheClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, SilentFlowClient, ServerTelemetryManager, AccountInfo, AzureCloudOptions} from \"@azure/msal-common\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(silentRequest: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return cachedToken;\n        } catch (error) {\n            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createSilentFlowClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<SilentFlowClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new SilentFlowClient(clientConfig);\n    }\n\n    async initializeSilentRequest(request: SilentRequest, account: AccountInfo): Promise<CommonSilentFlowRequest> {\n        return {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            account: account,\n            forceRefresh: request.forceRefresh || false\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}