{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { ClientAuthError } from './ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  },\n  invalidAzureCloudInstance: {\n    code: \"invalid_azure_cloud_instance\",\n    desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n  },\n  missingSshJwk: {\n    code: \"missing_ssh_jwk\",\n    desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n  },\n  missingSshKid: {\n    code: \"missing_ssh_kid\",\n    desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n  },\n  missingNonceAuthenticationHeader: {\n    code: \"missing_nonce_authentication_header\",\n    desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n  },\n  invalidAuthenticationHeader: {\n    code: \"invalid_authentication_header\",\n    desc: \"Invalid authentication header provided\"\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\n\nvar ClientConfigurationError =\n/** @class */\nfunction (_super) {\n  __extends(ClientConfigurationError, _super);\n\n  function ClientConfigurationError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n   */\n\n\n  ClientConfigurationError.createRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n   */\n\n\n  ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the claims request could not be successfully parsed\r\n   */\n\n\n  ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\n  };\n  /**\r\n   * Creates an error thrown if authority uri is given an insecure protocol.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\n  };\n  /**\r\n   * Creates an error thrown if URL string does not parse into separate segments.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createUrlParseError = function (urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\n  };\n  /**\r\n   * Creates an error thrown if URL string is empty or null.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createUrlEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  };\n  /**\r\n   * Error thrown when scopes are empty.\r\n   * @param scopesValue\r\n   */\n\n\n  ClientConfigurationError.createEmptyScopesArrayError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\n  };\n  /**\r\n   * Error thrown when client id scope is not provided as single scope.\r\n   * @param inputScopes\r\n   */\n\n\n  ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\n  };\n  /**\r\n   * Error thrown when prompt is not an allowed type.\r\n   * @param promptValue\r\n   */\n\n\n  ClientConfigurationError.createInvalidPromptError = function (promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\n  };\n  /**\r\n   * Creates error thrown when claims parameter is not a stringified JSON object\r\n   */\n\n\n  ClientConfigurationError.createInvalidClaimsRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n\n\n  ClientConfigurationError.createEmptyLogoutRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n\n\n  ClientConfigurationError.createEmptyTokenRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when an invalid code_challenge_method is passed by the user\r\n   */\n\n\n  ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  };\n  /**\r\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n   */\n\n\n  ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n\n\n  ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n\n\n  ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  };\n  /**\r\n   * Throws error when provided authority is not a member of the trusted host list\r\n   */\n\n\n  ClientConfigurationError.createUntrustedAuthorityError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  };\n  /**\r\n   * Throws error when the AzureCloudInstance is set to an invalid value\r\n   */\n\n\n  ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\r\n   */\n\n\n  ClientConfigurationError.createMissingSshJwkError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\r\n   */\n\n\n  ClientConfigurationError.createMissingSshKidError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n  };\n  /**\r\n   * Throws error when provided headers don't contain a header that a server nonce can be extracted from\r\n   */\n\n\n  ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n  };\n  /**\r\n   * Throws error when a provided header is invalid in any way\r\n   */\n\n\n  ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + \". Invalid header: \" + invalidHeaderName + \". Details: \" + details);\n  };\n\n  return ClientConfigurationError;\n}(ClientAuthError);\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"mappings":"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","names":["ClientConfigurationErrorMessage","redirectUriNotSet","code","desc","postLogoutUriNotSet","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyScopesError","nonArrayScopesError","clientIdSingleScopeError","invalidPrompt","invalidClaimsRequest","tokenRequestEmptyError","logoutRequestEmptyError","invalidCodeChallengeMethod","invalidCodeChallengeParams","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","invalidAzureCloudInstance","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","__extends","errorCode","errorMessage","_super","_this","name","Object","setPrototypeOf","ClientConfigurationError","prototype","claimsRequestParseError","urlString","inputScopes","promptValue","invalidHeaderName","details","ClientAuthError"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\error\\ClientConfigurationError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"./ClientAuthError\";\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\"\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\"\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\"\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\"\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\"\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\"\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\"\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\"\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\"\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n    },\n    invalidAzureCloudInstance: {\n        code: \"invalid_azure_cloud_instance\",\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n    },\n    missingSshJwk: {\n        code: \"missing_ssh_jwk\",\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n    },\n    missingSshKid: {\n        code: \"missing_ssh_kid\",\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n    },\n    missingNonceAuthenticationHeader: {\n        code: \"missing_nonce_authentication_header\",\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n    },\n    invalidAuthenticationHeader: {\n        code: \"invalid_authentication_header\",\n        desc: \"Invalid authentication header provided\"\n    }\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends ClientAuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code,\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(urlString: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code,\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(urlParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code,\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code,\n            ClientConfigurationErrorMessage.urlEmptyError.desc);\n    }\n\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code,\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n    }\n\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(promptValue: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n    }\n\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code,\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\n        );\n    }\n\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n    }\n\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\n    }\n\n    /**\n     * Throws error when the AzureCloudInstance is set to an invalid value\n     */\n    static createInvalidAzureCloudInstanceError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code,\n            ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n     */\n    static createMissingSshJwkError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code,\n            ClientConfigurationErrorMessage.missingSshJwk.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n     */\n    static createMissingSshKidError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code,\n            ClientConfigurationErrorMessage.missingSshKid.desc);\n    }\n\n    /**\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n     */\n    static createMissingNonceAuthenticationHeadersError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code,\n            ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n    }\n\n    /**\n     * Throws error when a provided header is invalid in any way\n     */\n    static createInvalidAuthenticationHeaderError(invalidHeaderName: string, details: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code,\n            `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}