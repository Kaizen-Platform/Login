{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Log message level.\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\n\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n\n    var defaultLoggerCallback = function defaultLoggerCallback() {\n      return;\n    };\n\n    this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n    this.level = typeof loggerOptions.logLevel === \"number\" ? loggerOptions.logLevel : LogLevel.Info;\n    this.correlationId = loggerOptions.correlationId || \"\";\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n\n\n  Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  };\n  /**\r\n   * Log message with required options.\r\n   */\n\n\n  Logger.prototype.logMessage = function (logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n\n    var timestamp = new Date().toUTCString(); // Add correlationId to logs if set, correlationId provided on log messages take precedence\n\n    var logHeader;\n\n    if (!StringUtils.isEmpty(options.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\n    } else if (!StringUtils.isEmpty(this.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\n    } else {\n      logHeader = \"[\" + timestamp + \"]\";\n    }\n\n    var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + LogLevel[options.logLevel] + \" - \" + logMessage; // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  };\n  /**\r\n   * Execute callback with message.\r\n   */\n\n\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * Logs error messages.\r\n   */\n\n\n  Logger.prototype.error = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs error messages with PII.\r\n   */\n\n\n  Logger.prototype.errorPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages.\r\n   */\n\n\n  Logger.prototype.warning = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n\n\n  Logger.prototype.warningPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages.\r\n   */\n\n\n  Logger.prototype.info = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages with PII.\r\n   */\n\n\n  Logger.prototype.infoPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages.\r\n   */\n\n\n  Logger.prototype.verbose = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n\n\n  Logger.prototype.verbosePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages.\r\n   */\n\n\n  Logger.prototype.trace = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n\n\n  Logger.prototype.tracePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n\n\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled || false;\n  };\n\n  return Logger;\n}();\n\nexport { LogLevel, Logger };","map":{"version":3,"mappings":";;;;;AAAA;;;;;AAmBA;;;;IAGYA;;AAAZ,WAAYA,QAAZ,EAAoB;AAChBA;AACAA;AACAA;AACAA;AACAA;AACH,CAND,EAAYA,QAAQ,KAARA,QAAQ,MAApB;AAeA;;;;;;;;AAuBI,kBAAYC,aAAZ,EAA0CC,WAA1C,EAAgEC,cAAhE,EAAuF;;AAd/E,iBAAkBH,QAAQ,CAACI,IAA3B;;AAeJ,QAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAC1B;AACH,KAFD;;AAGA,SAAKC,aAAL,GAAqBL,aAAa,CAACM,cAAd,IAAgCF,qBAArD;AACA,SAAKG,iBAAL,GAAyBP,aAAa,CAACO,iBAAd,IAAmC,KAA5D;AACA,SAAKC,KAAL,GAAa,OAAOR,aAAa,CAACS,QAArB,KAAmC,QAAnC,GAA8CT,aAAa,CAACS,QAA5D,GAAuEV,QAAQ,CAACI,IAA7F;AACA,SAAKO,aAAL,GAAqBV,aAAa,CAACU,aAAd,IAA+B,EAApD;AAEA,SAAKT,WAAL,GAAmBA,WAAW,IAAIU,SAAS,CAACC,YAA5C;AACA,SAAKV,cAAL,GAAsBA,cAAc,IAAIS,SAAS,CAACC,YAAlD;AACH;;;;;;AAKMC,2BAAP,UAAaZ,WAAb,EAAkCC,cAAlC,EAA0DQ,aAA1D,EAAgF;AAC5E,WAAO,IAAIG,MAAJ,CAAW;AAACP,oBAAc,EAAE,KAAKD,aAAtB;AAAqCE,uBAAiB,EAAE,KAAKA,iBAA7D;AAAgFE,cAAQ,EAAE,KAAKD,KAA/F;AAAsGE,mBAAa,EAAEA,aAAa,IAAI,KAAKA;AAA3I,KAAX,EAAsKT,WAAtK,EAAmLC,cAAnL,CAAP;AACH,GAFM;;;;;;AAOCW,gCAAR,UAAmBC,UAAnB,EAAuCC,OAAvC,EAAoE;AAChE,QAAKA,OAAO,CAACN,QAAR,GAAmB,KAAKD,KAAzB,IAAoC,CAAC,KAAKD,iBAAN,IAA2BQ,OAAO,CAACC,WAA3E,EAAyF;AACrF;AACH;;AACD,QAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAlB,CAJgE;;AAOhE,QAAIC,SAAJ;;AACA,QAAI,CAACC,WAAW,CAACC,OAAZ,CAAoBP,OAAO,CAACL,aAA5B,CAAL,EAAiD;AAC7CU,eAAS,GAAG,MAAIH,SAAJ,GAAa,OAAb,GAAqBF,OAAO,CAACL,aAA7B,GAA0C,GAAtD;AACH,KAFD,MAEO,IAAI,CAACW,WAAW,CAACC,OAAZ,CAAoB,KAAKZ,aAAzB,CAAL,EAA8C;AACjDU,eAAS,GAAG,MAAIH,SAAJ,GAAa,OAAb,GAAqB,KAAKP,aAA1B,GAAuC,GAAnD;AACH,KAFM,MAEA;AACHU,eAAS,GAAG,MAAIH,SAAJ,GAAa,GAAzB;AACH;;AAED,QAAMM,GAAG,GAAMH,SAAS,QAAT,GAAe,KAAKnB,WAApB,GAA+B,GAA/B,GAAmC,KAAKC,cAAxC,GAAsD,KAAtD,GAA4DH,QAAQ,CAACgB,OAAO,CAACN,QAAT,CAApE,GAAsF,KAAtF,GAA4FK,UAA3G,CAhBgE;;AAkBhE,SAAKU,eAAL,CAAqBT,OAAO,CAACN,QAA7B,EAAuCc,GAAvC,EAA4CR,OAAO,CAACC,WAAR,IAAuB,KAAnE;AACH,GAnBO;;;;;;AAwBRH,+CAAgBL,KAAhB,EAAiCiB,OAAjC,EAAkDT,WAAlD,EAAsE;AAClE,QAAI,KAAKX,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBG,KAAnB,EAA0BiB,OAA1B,EAAmCT,WAAnC;AACH;AACJ,GAJD;;;;;;AASAH,qCAAMY,OAAN,EAAuBf,aAAvB,EAA6C;AACzC,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC2B,KADE;AAErBV,iBAAW,EAAE,KAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,wCAASY,OAAT,EAA0Bf,aAA1B,EAAgD;AAC5C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC2B,KADE;AAErBV,iBAAW,EAAE,IAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,uCAAQY,OAAR,EAAyBf,aAAzB,EAA+C;AAC3C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC4B,OADE;AAErBX,iBAAW,EAAE,KAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,0CAAWY,OAAX,EAA4Bf,aAA5B,EAAkD;AAC9C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC4B,OADE;AAErBX,iBAAW,EAAE,IAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,oCAAKY,OAAL,EAAsBf,aAAtB,EAA4C;AACxC,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAACI,IADE;AAErBa,iBAAW,EAAE,KAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,uCAAQY,OAAR,EAAyBf,aAAzB,EAA+C;AAC3C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAACI,IADE;AAErBa,iBAAW,EAAE,IAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,uCAAQY,OAAR,EAAyBf,aAAzB,EAA+C;AAC3C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC6B,OADE;AAErBZ,iBAAW,EAAE,KAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,0CAAWY,OAAX,EAA4Bf,aAA5B,EAAkD;AAC9C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC6B,OADE;AAErBZ,iBAAW,EAAE,IAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,qCAAMY,OAAN,EAAuBf,aAAvB,EAA6C;AACzC,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC8B,KADE;AAErBb,iBAAW,EAAE,KAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG,wCAASY,OAAT,EAA0Bf,aAA1B,EAAgD;AAC5C,SAAKI,UAAL,CAAgBW,OAAhB,EAAyB;AACrBhB,cAAQ,EAAEV,QAAQ,CAAC8B,KADE;AAErBb,iBAAW,EAAE,IAFQ;AAGrBN,mBAAa,EAAEA,aAAa,IAAI;AAHX,KAAzB;AAKH,GAND;;;;;;AAWAG;AACI,WAAO,KAAKN,iBAAL,IAA0B,KAAjC;AACH,GAFD;;AAGJ;AAAC","names":["LogLevel","loggerOptions","packageName","packageVersion","Info","defaultLoggerCallback","localCallback","loggerCallback","piiLoggingEnabled","level","logLevel","correlationId","Constants","EMPTY_STRING","Logger","logMessage","options","containsPii","timestamp","Date","toUTCString","logHeader","StringUtils","isEmpty","log","executeCallback","message","Error","Warning","Verbose","Trace"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\logger\\Logger.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel,\n    containsPii?: boolean,\n    context?: string,\n    correlationId?: string\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\n        const defaultLoggerCallback = () => {\n            return;\n        };\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n        this.level = typeof(loggerOptions.logLevel) === \"number\" ? loggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = loggerOptions.correlationId || \"\";\n\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        let logHeader: string;\n        if (!StringUtils.isEmpty(options.correlationId)) {\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\n        } else {\n            logHeader = `[${timestamp}]`;\n        }\n\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}