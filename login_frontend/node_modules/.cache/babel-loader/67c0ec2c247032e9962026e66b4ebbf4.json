{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Update the server telemetry outcome\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            cachedIdToken = this.readIdTokenFromCache(request);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n              };\n              cachedAccount = this.readAccountFromCache(accountInfo);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read access token from cache TODO: CacheManager API should be used here\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * read idtoken from cache TODO: CacheManager API should be used here instead\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\n    var idTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      oboAssertion: request.oboAssertion\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    }); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * read account from cache, TODO: CacheManager API should be used here instead\r\n   * @param account\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\n    return this.cacheManager.readAccountFromCache(account);\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","OnBehalfOfClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","serverTelemetryManager","setCacheOutcome","CacheOutcome","CACHED_ACCESS_TOKEN_EXPIRED","NO_CACHED_ACCESS_TOKEN","cachedIdToken","readIdTokenFromCache","cachedAccount","idTokenObject","AuthToken","secret","cryptoInterface","localAccountId","claims","oid","sub","accountInfo","homeAccountId","environment","tenantId","realm","username","Constants","EMPTY_STRING","readAccountFromCache","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","accessToken","idToken","refreshToken","appMetadata","_b","accessTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","numAccessTokens","length","ClientAuthError","createMultipleMatchingTokensInCacheError","idTokenFilter","ID_TOKEN","oboAssertion","idTokens","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","AADServerParamKeys","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","createQueryString","BaseClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\client\\OnBehalfOfClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AccountInfo } from \"../account/AccountInfo\";\n\n/**\n * On-Behalf-Of client\n */\nexport class OnBehalfOfClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire tokens with on behalf of flow\n     * @param request\n     */\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * look up cache for tokens\n     * @param request\n     */\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        const cachedAccessToken = this.readAccessTokenFromCache();\n        if (!cachedAccessToken ||\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n\n            // Update the server telemetry outcome\n            this.serverTelemetryManager?.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n\n            return null;\n        }\n\n        const cachedIdToken = this.readIdTokenFromCache(request);\n        let idTokenObject: AuthToken | undefined;\n        let cachedAccount: AccountEntity | null = null;\n        if (cachedIdToken) {\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n            const accountInfo: AccountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n            };\n\n            cachedAccount = this.readAccountFromCache(accountInfo);\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: cachedAccount,\n                accessToken: cachedAccessToken,\n                idToken: cachedIdToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request,\n            idTokenObject);\n    }\n\n    /**\n     * read access token from cache TODO: CacheManager API should be used here\n     * @param request\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase(),\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * read idtoken from cache TODO: CacheManager API should be used here instead\n     * @param request\n     */\n    private readIdTokenFromCache(request: CommonOnBehalfOfRequest): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            oboAssertion: request.oboAssertion\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\n        if (idTokens.length < 1) {\n            return null;\n        }\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * read account from cache, TODO: CacheManager API should be used here instead\n     * @param account\n     */\n    private readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        return this.cacheManager.readAccountFromCache(account);\n    }\n\n    /**\n     * Make a network call to the server requesting credentials\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate a server request in accepable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n\n        parameterBuilder.addOboAssertion(request.oboAssertion);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}