{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RegionDiscovery =\n/** @class */\nfunction () {\n  function RegionDiscovery(networkInterface) {\n    this.networkInterface = networkInterface;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata, proxyUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3\n            /*break*/\n            , 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n\n            if (proxyUrl) {\n              options.proxyUrl = proxyUrl;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n\n          case 2:\n            localIMDSVersionResponse = _a.sent();\n\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getCurrentVersion(options)];\n\n          case 3:\n            currentIMDSVersion = _a.sent();\n\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(currentIMDSVersion, options)];\n\n          case 4:\n            currentIMDSVersionResponse = _a.sent();\n\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            _a.sent();\n\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2\n            /*return*/\n            , null];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _a.label = 9;\n\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n\n            return [2\n            /*return*/\n            , autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n\n\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n\n          case 1:\n            response = _a.sent(); // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2\n              /*return*/\n              , response.body[\"newest-versions\"][0]];\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Options for the IMDS endpoint request\n\n\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\n\nexport { RegionDiscovery };","map":{"version":3,"mappings":"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","names":["networkInterface","RegionDiscovery","environmentRegion","regionDiscoveryMetadata","proxyUrl","autodetectedRegionName","options","IMDS_OPTIONS","getRegionFromIMDS","Constants","IMDS_VERSION","localIMDSVersionResponse","_a","status","ResponseCodes","httpSuccess","body","region_source","RegionDiscoverySources","IMDS","httpBadRequest","getCurrentVersion","currentIMDSVersion","FAILED_AUTO_DETECTION","currentIMDSVersionResponse","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\authority\\RegionDiscovery.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS: ImdsOptions = {\n        headers: {\n            Metadata: \"true\",\n        },\n    };\n\n    constructor(networkInterface: INetworkModule) {\n        this.networkInterface = networkInterface;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata, proxyUrl: string): Promise<string | null> {\n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            if (proxyUrl) {\n                options.proxyUrl = proxyUrl;\n            }\n\n            try {\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                } \n                \n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await this.getCurrentVersion(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch(e) {\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            } \n        } else {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string, options: ImdsOptions): Promise<NetworkResponse<string>> {\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(options: ImdsOptions): Promise<string | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}