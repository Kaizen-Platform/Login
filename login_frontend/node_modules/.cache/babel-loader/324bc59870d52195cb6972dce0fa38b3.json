{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ThrottlingUtils, ClientAuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectHandler =\n/** @class */\nfunction (_super) {\n  __extends(RedirectHandler, _super);\n\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n\n\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3\n            /*break*/\n            , 7]; // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n\n            if (params.redirectStartPage) {\n              this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            } // Set interaction status in the library.\n\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 4];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 2];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            // Navigate window to request URL\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n\n\n  RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule, clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            } // Interaction is completed - remove interaction status.\n\n\n            this.browserStorage.setInteractionInProgress(false);\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            } // Remove throttle if it exists\n\n\n            if (clientId) {\n              ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest);\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n\n  return RedirectHandler;\n}(InteractionHandler);\n\nexport { RedirectHandler };","map":{"version":3,"mappings":"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","names":["__extends","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","browserCrypto","_super","_this","RedirectHandler","requestUrl","params","verbose","StringUtils","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","CORRELATION_ID","correlationId","cacheCodeRequest","infoPii","navigationOptions","apiId","ApiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","_a","info","BrowserAuthError","createEmptyNavigationUriError","locationHash","state","authority","networkModule","clientId","createEmptyHashError","setInteractionInProgress","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","ThrottlingUtils","removeThrottle","acquireToken","tokenResponse","cleanRequestByState","InteractionHandler"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\RedirectHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, ThrottlingUtils, Authority, INetworkModule, ClientAuthError, Logger } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\n\nexport type RedirectParams = InteractionParams & {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler extends InteractionHandler {\n\n    private browserCrypto: ICrypto;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, browserCrypto: ICrypto) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (!StringUtils.isEmpty(requestUrl)) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            \n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule, clientId?: string): Promise<AuthenticationResult> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Remove throttle if it exists\n        if (clientId) {\n            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest);\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}