{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { MathUtils } from '../utils/MathUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar GuidGenerator =\n/** @class */\nfunction () {\n  function GuidGenerator(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /*\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n   * pseudo-random numbers.\r\n   * The algorithm is as follows:\r\n   *     Set the two most significant bits (bits 6 and 7) of the\r\n   *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n   *     Set the four most significant bits (bits 12 through 15) of the\r\n   *        time_hi_and_version field to the 4-bit version number from\r\n   *        Section 4.1.3. Version4\r\n   *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n   *     values.\r\n   * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n   * time-low               = 4hexOctet\r\n   * time-mid               = 2hexOctet\r\n   * time-high-and-version  = 2hexOctet\r\n   * clock-seq-and-reserved = hexOctet:\r\n   * clock-seq-low          = hexOctet\r\n   * node                   = 6hexOctet\r\n   * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n   * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n   * y values are 8, 9, A, B\r\n   */\n\n\n  GuidGenerator.prototype.generateGuid = function () {\n    try {\n      var buffer = new Uint8Array(16);\n      this.cryptoObj.getRandomValues(buffer); // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n      return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1]) + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3]) + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5]) + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7]) + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9]) + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11]) + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13]) + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n    } catch (err) {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = \"\";\n\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\n          r |= 0x8; // set pos 3 to 1 as 1???\n\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n\n      return guidResponse;\n    }\n  };\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n\n\n  GuidGenerator.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n\n  return GuidGenerator;\n}();\n\nexport { GuidGenerator };","map":{"version":3,"mappings":"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","names":["cryptoObj","GuidGenerator","buffer","Uint8Array","getRandomValues","MathUtils","decimalToHex","err","guidHolder","hex","r","guidResponse","i","Math","random","guid","regexGuid","test"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\crypto\\GuidGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { MathUtils } from \"../utils/MathUtils\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\n\nexport class GuidGenerator {\n\n    // browser crypto object used to generate random values\n    private cryptoObj: BrowserCrypto;\n\n    constructor(cryptoObj: BrowserCrypto) {\n        this.cryptoObj = cryptoObj;\n    }\n\n    /*\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n     * pseudo-random numbers.\n     * The algorithm is as follows:\n     *     Set the two most significant bits (bits 6 and 7) of the\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\n     *     Set the four most significant bits (bits 12 through 15) of the\n     *        time_hi_and_version field to the 4-bit version number from\n     *        Section 4.1.3. Version4\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\n     *     values.\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n     * time-low               = 4hexOctet\n     * time-mid               = 2hexOctet\n     * time-high-and-version  = 2hexOctet\n     * clock-seq-and-reserved = hexOctet:\n     * clock-seq-low          = hexOctet\n     * node                   = 6hexOctet\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n     * y values are 8, 9, A, B\n     */\n    generateGuid(): string {\n        try {\n            const buffer: Uint8Array = new Uint8Array(16);\n            this.cryptoObj.getRandomValues(buffer);\n\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n        }\n        catch (err) {\n            const guidHolder: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n            const hex: string = \"0123456789abcdef\";\n            let r: number = 0;\n            let guidResponse: string = \"\";\n            for (let i: number = 0; i < 36; i++) {\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n                    // each x and y needs to be random\n                    r = Math.random() * 16 | 0;\n                }\n                if (guidHolder[i] === \"x\") {\n                    guidResponse += hex[r];\n                } else if (guidHolder[i] === \"y\") {\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n                    r |= 0x8; // set pos 3 to 1 as 1???\n                    guidResponse += hex[r];\n                } else {\n                    guidResponse += guidHolder[i];\n                }\n            }\n            return guidResponse;\n        }\n    }\n\n    /**\n     * verifies if a string is  GUID\n     * @param guid\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}