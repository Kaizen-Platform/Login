{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientInfo } from '../account/ClientInfo.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { AuthorityType } from '../authority/AuthorityType.js';\nimport { IdTokenEntity } from '../cache/entities/IdTokenEntity.js';\nimport { AccessTokenEntity } from '../cache/entities/AccessTokenEntity.js';\nimport { RefreshTokenEntity } from '../cache/entities/RefreshTokenEntity.js';\nimport { InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.js';\nimport { CacheRecord } from '../cache/entities/CacheRecord.js';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.js';\nimport { Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { AppMetadataEntity } from '../cache/entities/AppMetadataEntity.js';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class that handles response parsing.\r\n */\n\nvar ResponseHandler =\n/** @class */\nfunction () {\n  function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n  }\n  /**\r\n   * Function which validates server authorization code response.\r\n   * @param serverResponseHash\r\n   * @param cachedState\r\n   * @param cryptoObj\r\n   */\n\n\n  ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\n    if (!serverResponseHash.state || !cachedState) {\n      throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n\n    if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n      throw ClientAuthError.createStateMismatchError();\n    } // Check for error\n\n\n    if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n      }\n\n      throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n    }\n\n    if (serverResponseHash.client_info) {\n      buildClientInfo(serverResponseHash.client_info, cryptoObj);\n    }\n  };\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   */\n\n\n  ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n      }\n\n      var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\n      throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n    }\n  };\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (serverTokenResponse.id_token) {\n              idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj); // token nonce check (TODO: Add a warning if no nonce is given?)\n\n              if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                  throw ClientAuthError.createNonceMismatchError();\n                }\n              }\n            } // generate homeAccountId\n\n\n            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n            if (!!authCodePayload && !!authCodePayload.state) {\n              requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n            } // Add keyId from request to serverTokenResponse if defined\n\n\n            serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 5, 8]);\n\n            if (!(this.persistencePlugin && this.serializableCache)) return [3\n            /*break*/\n            , 3];\n            this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n            cacheContext = new TokenCacheContext(this.serializableCache, true);\n            return [4\n            /*yield*/\n            , this.persistencePlugin.beforeCacheAccess(cacheContext)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n              key = cacheRecord.account.generateAccountKey();\n              account = this.cacheStorage.getAccount(key);\n\n              if (!account) {\n                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                return [2\n                /*return*/\n                , ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.cacheStorage.saveCacheRecord(cacheRecord)];\n\n          case 4:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 5:\n            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3\n            /*break*/\n            , 7];\n            this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n            return [4\n            /*yield*/\n            , this.persistencePlugin.afterCacheAccess(cacheContext)];\n\n          case 6:\n            _a.sent();\n\n            _a.label = 7;\n\n          case 7:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload) {\n    var env = authority.getPreferredCache();\n\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    } // IdToken: non AAD scenarios can have empty realm\n\n\n    var cachedIdToken;\n    var cachedAccount;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n      cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING, oboAssertion);\n      cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);\n    } // AccessToken\n\n\n    var cachedAccessToken = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n      // If scopes not returned in server response, use request scopes\n      var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n\n      var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      var tokenExpirationSeconds = reqTimestamp + expiresIn;\n      var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined; // non AAD scenarios can have empty realm\n\n      cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n    } // refreshToken\n\n\n    var cachedRefreshToken = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n      cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);\n    } // appMetadata\n\n\n    var cachedAppMetadata = null;\n\n    if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n      cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n    }\n\n    return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n  };\n  /**\r\n   * Generate Account\r\n   * @param serverTokenResponse\r\n   * @param idToken\r\n   * @param authority\r\n   */\n\n\n  ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {\n    var authorityType = authority.authorityType;\n    var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n    var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\"; // ADFS does not require client_info in the response\n\n    if (authorityType === AuthorityType.Adfs) {\n      this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n      return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n    } // This fallback applies to B2C as well as they fall under an AAD account type.\n\n\n    if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n      throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    return serverTokenResponse.client_info ? AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) : AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n  };\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n\n\n  ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, code) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            accessToken = \"\";\n            responseScopes = [];\n            expiresOn = null;\n            familyId = Constants.EMPTY_STRING;\n            if (!cacheRecord.accessToken) return [3\n            /*break*/\n            , 4];\n            if (!(cacheRecord.accessToken.tokenType === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(cryptoObj);\n            return [4\n            /*yield*/\n            , popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];\n\n          case 1:\n            accessToken = _d.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            accessToken = cacheRecord.accessToken.secret;\n            _d.label = 3;\n\n          case 3:\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            _d.label = 4;\n\n          case 4:\n            if (cacheRecord.appMetadata) {\n              familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n            }\n\n            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n            return [2\n            /*return*/\n            , {\n              authority: authority.canonicalAuthority,\n              uniqueId: uid,\n              tenantId: tid,\n              scopes: responseScopes,\n              account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n              idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n              idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n              accessToken: accessToken,\n              fromCache: fromTokenCache,\n              expiresOn: expiresOn,\n              correlationId: request.correlationId,\n              extExpiresOn: extExpiresOn,\n              familyId: familyId,\n              tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n              state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n              cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n              msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n              code: code\n            }];\n        }\n      });\n    });\n  };\n\n  return ResponseHandler;\n}();\n\nexport { ResponseHandler };","map":{"version":3,"mappings":"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","names":["clientId","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","ResponseHandler","serverResponseHash","cachedState","state","ClientAuthError","createStateNotFoundError","decodeURIComponent","createStateMismatchError","error","error_description","suberror","InteractionRequiredAuthError","isInteractionRequiredError","Constants","EMPTY_STRING","ServerError","client_info","buildClientInfo","serverResponse","errString","error_codes","timestamp","correlation_id","trace_id","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","oboAssertion","handlingRefreshTokenResponse","id_token","idTokenObj","AuthToken","StringUtils","isEmpty","nonce","claims","createNonceMismatchError","homeAccountIdentifier","AccountEntity","generateHomeAccountId","authorityType","requestStateObj","ProtocolUtils","parseRequestState","key_id","sshKid","undefined","cacheRecord","generateCacheRecord","verbose","cacheContext","TokenCacheContext","beforeCacheAccess","_a","account","key","generateAccountKey","getAccount","warning","generateAuthenticationResult","saveCacheRecord","afterCacheAccess","spa_code","env","getPreferredCache","createInvalidCacheEnvironmentError","cachedIdToken","cachedAccount","IdTokenEntity","createIdTokenEntity","tid","generateAccountEntity","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","scopes","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","AccessTokenEntity","createAccessTokenEntity","tenant","printScopes","token_type","requestedClaimsHash","cachedRefreshToken","refresh_token","RefreshTokenEntity","createRefreshTokenEntity","foci","cachedAppMetadata","AppMetadataEntity","createAppMetadataEntity","CacheRecord","idToken","cloudGraphHostName","cloud_graph_host_name","msGraphhost","msgraph_host","AuthorityType","Adfs","createGenericAccount","protocolMode","createClientInfoEmptyError","createAccount","fromTokenCache","requestState","code","accessToken","expiresOn","familyId","tokenType","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","signPopToken","secret","_d","target","asArray","Date","Number","extExpiresOn","extendedExpiresOn","appMetadata","THE_FAMILY_ID","uid","oid","sub","canonicalAuthority","uniqueId","tenantId","getAccountInfo","rawToken","idTokenClaims","fromCache","correlationId","userRequestState","_b","msGraphHost","_c"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\response\\ResponseHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { buildClientInfo} from \"../account/ClientInfo\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { AuthorityType } from \"../authority/AuthorityType\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Class that handles response parsing.\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param cachedState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\n\n        if (!serverResponseHash.state || !cachedState) {\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n            throw ClientAuthError.createStateMismatchError();\n        }\n\n        // Check for error\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n            }\n\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n        }\n\n        if (serverResponseHash.client_info) {\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     */\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n            }\n\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        oboAssertion?: string,\n        handlingRefreshTokenResponse?: boolean): Promise<AuthenticationResult> {\n\n        // create an idToken object (not entity)\n        let idTokenObj: AuthToken | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n            \n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                    throw ClientAuthError.createNonceMismatchError();\n                }\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord);\n        } finally {\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code);\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, request: BaseAuthRequest, idTokenObj?: AuthToken, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\n                oboAssertion\n            );\n\n            cachedAccount = this.generateAccountEntity(\n                serverTokenResponse,\n                idTokenObj,\n                authority,\n                oboAssertion,\n                authCodePayload\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                oboAssertion,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n        \n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\n                this.clientId,\n                serverTokenResponse.foci,\n                oboAssertion\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n\n    /**\n     * Generate Account\n     * @param serverTokenResponse\n     * @param idToken\n     * @param authority\n     */\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): AccountEntity {\n        const authorityType = authority.authorityType;\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\n\n        // ADFS does not require client_info in the response\n        if (authorityType === AuthorityType.Adfs) {\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n            return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n        }\n\n        // This fallback applies to B2C as well as they fall under an AAD account type.\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n            throw ClientAuthError.createClientInfoEmptyError();\n        }\n\n        return serverTokenResponse.client_info ?\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) :\n            AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto, \n        authority: Authority,\n        cacheRecord: CacheRecord, \n        fromTokenCache: boolean, \n        request: BaseAuthRequest,\n        idTokenObj?: AuthToken,\n        requestState?: RequestStateObject,\n        code?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = \"\";\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\n                accessToken = await popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n        }\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId,\n            extExpiresOn: extExpiresOn,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}