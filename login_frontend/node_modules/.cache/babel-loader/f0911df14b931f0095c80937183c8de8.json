{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ServerTelemetryManager =\n/** @class */\nfunction () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length; // Indicate whether this header contains all data or partial data\n\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n\n\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n\n      lastRequests.failedRequests.shift(); // correlationId\n\n      lastRequests.errors.shift();\n    }\n\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n    if (!StringUtils.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n\n\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n\n\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n\n\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n\n\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING; // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n\n\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || \"\");\n    regionDiscoveryFields.push(this.regionSource || \"\");\n    regionDiscoveryFields.push(this.regionOutcome || \"\");\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n\n\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n\n\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n\n  return ServerTelemetryManager;\n}();\n\nexport { ServerTelemetryManager };","map":{"version":3,"mappings":"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","names":["telemetryRequest","cacheManager","CacheOutcome","NO_CACHE_HIT","apiId","correlationId","wrapperSKU","Constants","EMPTY_STRING","wrapperVer","telemetryCacheKey","SERVER_TELEM_CONSTANTS","CACHE_KEY","Separators","CACHE_KEY_SEPARATOR","clientId","ServerTelemetryManager","request","VALUE_SEPARATOR","cacheOutcome","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","error","MAX_CACHED_ERRORS","shift","push","StringUtils","isEmpty","subError","errorCode","toString","UNKNOWN_ERROR","setServerTelemetry","initialValue","ServerTelemetryEntity","getServerTelemetry","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","regionDiscoveryMetadata","region_used","region_source","region_outcome"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\telemetry\\server\\ServerTelemetryManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SERVER_TELEM_CONSTANTS, Separators, CacheOutcome, Constants, RegionDiscoverySources, RegionDiscoveryOutcomes } from \"../../utils/Constants\";\nimport { CacheManager } from \"../../cache/CacheManager\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\n\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n    private regionUsed: string | undefined;\n    private regionSource: RegionDiscoverySources | undefined;\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\n    private cacheOutcome: CacheOutcome = CacheOutcome.NO_CACHE_HIT;\n\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: AuthError): void {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        \n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (!StringUtils.isEmpty(error.subError)) {\n            lastRequests.errors.push(error.subError);\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\n            lastRequests.errors.push(error.errorCode);\n        } else if (!!error && error.toString()) {\n            lastRequests.errors.push(error.toString());\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = new ServerTelemetryEntity();\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n\n    /**\n     * Get the region discovery fields\n     * \n     * @returns string\n     */\n    getRegionDiscoveryFields(): string {\n        const regionDiscoveryFields: string[] = [];\n\n        regionDiscoveryFields.push(this.regionUsed || \"\");\n        regionDiscoveryFields.push(this.regionSource || \"\");\n        regionDiscoveryFields.push(this.regionOutcome || \"\");\n\n        return regionDiscoveryFields.join(\",\");\n    }\n\n    /**\n     * Update the region discovery metadata\n     * \n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n\n    /**\n     * Set cache outcome \n     */\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\n        this.cacheOutcome = cacheOutcome;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}