{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserProtocolUtils =\n/** @class */\nfunction () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n\n\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n\n\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n\n  return BrowserProtocolUtils;\n}();\n\nexport { BrowserProtocolUtils };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;AAYA,mCAgCC;;;;;;;;AAzBUA,oDAAP,UAAkCC,aAAlC,EAA0DC,KAA1D,EAAuE;AACnE,QAAIC,WAAW,CAACC,OAAZ,CAAoBF,KAApB,CAAJ,EAAgC;AAC5B,aAAO,IAAP;AACH;;AAED,QAAI;AACA,UAAMG,eAAe,GAAuBC,aAAa,CAACC,iBAAd,CAAgCN,aAAhC,EAA+CC,KAA/C,CAA5C;AACA,aAAOG,eAAe,CAACG,YAAhB,CAA6BC,IAApC;AACH,KAHD,CAGE,OAAOC,CAAP,EAAU;AACR,YAAMC,eAAe,CAACC,uBAAhB,CAAwCV,KAAxC,EAA+CQ,CAA/C,CAAN;AACH;AACJ,GAXM;;;;;;;AAiBAV,qDAAP,UAAmCa,YAAnC,EAAuD;AACnD,QAAI,CAACA,YAAL,EAAmB;AACf,aAAO,EAAP;AACH;;AAED,QAAMC,aAAa,GAAG,IAAIC,SAAJ,CAAcF,YAAd,CAAtB;AACA,WAAOE,SAAS,CAACC,mBAAV,CAA8BF,aAAa,CAACG,OAAd,EAA9B,CAAP;AACH,GAPM;;AAQX;AAAC","names":["BrowserProtocolUtils","browserCrypto","state","StringUtils","isEmpty","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta","e","ClientAuthError","createInvalidStateError","locationHash","hashUrlString","UrlString","getDeserializedHash","getHash"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType\n};\n\nexport class BrowserProtocolUtils {\n\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto \n     * @param state \n     */\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\n        if (StringUtils.isEmpty(state)) {\n            return null;\n        }\n\n        try {\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta as BrowserStateObject;\n        } catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\n        if (!locationHash) {\n            return {};\n        }\n        \n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}