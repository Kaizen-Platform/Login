{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupUtils =\n/** @class */\nfunction () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger; // Properly sets this reference for the unload event.\n\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes, logger) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n\n\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generatePopupName = function (clientId, scopes, authority, correlationId) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n\n  return PopupUtils;\n}();\n\nexport { PopupUtils };","map":{"version":3,"mappings":"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","names":["storageImpl","logger","browserStorage","unloadWindow","bind","PopupUtils","urlNavigate","popupParams","popupWindow","popup","verbosePii","location","assign","openSizedPopup","popupName","popupWindowAttributes","BrowserAuthError","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","e","error","message","setInteractionInProgress","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","_a","height","_b","top","popupPosition","_c","left","_d","verbose","BrowserConstants","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","InteractionType","Popup","close","preventDefault","removeEventListener","Promise","resolve","reject","intervalId","setInterval","closed","_this","cleanPopup","clearInterval","createUserCancelledError","href","Constants","EMPTY_STRING","StringUtils","isEmpty","POLL_INTERVAL_MS","clientId","scopes","authority","correlationId","POPUP_NAME_PREFIX","join","request","homeAccountId","account"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\utils\\PopupUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { PopupParams } from \"../interaction_handler/PopupHandler\";\nimport { BrowserConstants, InteractionType } from \"./BrowserConstants\";\n\n/**\n * Popup configurations for setting dimensions and position of popup window\n */\nexport type PopupWindowAttributes = {\n    popupSize?: PopupSize,\n    popupPosition?: PopupPosition\n};\n\nexport type PopupSize = {\n    height: number;\n    width: number;\n};\n\nexport type PopupPosition = {\n    top: number;\n    left: number;\n};\n\nexport class PopupUtils {\n    private browserStorage: BrowserCacheManager;\n    private logger: Logger;\n    private currentWindow: Window|undefined;\n\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\n        this.browserStorage = storageImpl;\n        this.logger = logger;\n\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw BrowserAuthError.createEmptyWindowCreatedError();\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + e.message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw BrowserAuthError.createPopupWindowError(e.toString());\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate \n     * @param popupName \n     * @param popupWindowAttributes \n     * @returns \n     */\n    static openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes, logger: Logger): Window|null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\n        }\n\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     */\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const intervalId = setInterval(() => {\n                if (popupWindow.closed) {\n                    // Window is closed\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createUserCancelledError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                clearInterval(intervalId);\n                resolve();\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    static generatePopupName(clientId: string, scopes: Array<string>, authority: string, correlationId: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${scopes.join(\"-\")}.${authority}.${correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId \n     * @param request \n     */\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}