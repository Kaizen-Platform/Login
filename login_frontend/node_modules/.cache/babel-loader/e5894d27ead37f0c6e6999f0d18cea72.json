{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, CacheOutcome } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient =\n/** @class */\nfunction (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   * TODO: Move this call to cacheManager instead\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: \"\",\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient);\n\nexport { ClientCredentialClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","ClientCredentialClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","_b","CACHED_ACCESS_TOKEN_EXPIRED","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","length","ClientAuthError","createMultipleMatchingTokensInCacheError","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\client\\ClientCredentialClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType , CredentialType, CacheOutcome } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * OAuth2.0 client credential grant\n */\nexport class ClientCredentialClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\n     * @param request\n     */\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * looks up cache if the tokens are cached already\n     */\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n        \n        const cachedAccessToken = this.readAccessTokenFromCache();\n\n        if (!cachedAccessToken) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            return null;\n        }\n\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            return null;\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: null,\n                idToken: null,\n                accessToken: cachedAccessToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request\n        );\n    }\n\n    /**\n     * Reads access token from the cache\n     * TODO: Move this call to cacheManager instead\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: \"\",\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase()\n        };\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n        if (accessTokens.length < 1) {\n            return null;\n        } else if (accessTokens.length > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Makes a network call to request the token from the service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate the request to the server in the acceptable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes, false);\n\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}