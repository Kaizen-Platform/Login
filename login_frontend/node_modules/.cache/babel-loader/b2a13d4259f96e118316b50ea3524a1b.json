{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /* async: */\n      true);\n\n      _this.setXhrHeaders(xhr, options);\n\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n\n\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n\n  return XhrClient;\n}();\n\nexport { XhrClient };","map":{"version":3,"mappings":"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","names":["XhrClient","url","options","sendRequestAsync","HTTP_REQUEST_TYPE","GET","POST","method","Promise","resolve","reject","xhr","XMLHttpRequest","open","_this","setXhrHeaders","onload","status","BrowserAuthError","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","headers_1","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\network\\XhrClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This client implements the XMLHttpRequest class to send GET and POST requests.\n */\nexport class XhrClient implements INetworkModule {\n\n    /**\n     * XhrClient for REST endpoints - Get request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\n    }\n\n    /**\n     * XhrClient for REST endpoints - Post request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\n    }\n\n    /**\n     * Helper for XhrClient requests.\n     * @param url \n     * @param method \n     * @param options \n     */\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url, /* async: */ true);\n            this.setXhrHeaders(xhr, options);\n            xhr.onload = (): void => {\n                if (xhr.status < 200 || xhr.status >= 300) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                }\n                try {\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\n                    const networkResponse: NetworkResponse<T> = {\n                        headers: this.getHeaderDict(xhr),\n                        body: jsonResponse,\n                        status: xhr.status\n                    };\n                    resolve(networkResponse);\n                } catch (e) {\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n                }\n            };\n\n            xhr.onerror = (): void => {\n                if (window.navigator.onLine) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                } else {\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\n                }\n            };\n\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n                xhr.send(options.body);\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\n                xhr.send();\n            } else {\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n            }\n        });\n    }\n\n    /**\n     * Helper to set XHR headers for request.\n     * @param xhr \n     * @param options \n     */\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\n        if (options && options.headers) {\n            const headers = options.headers;\n            Object.keys(headers).forEach((key: string) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n    }\n\n    /**\n     * Gets a string map of the headers received in the response.\n     * \n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n     * @param xhr \n     */\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\n        const headerString = xhr.getAllResponseHeaders();\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\n        const headerDict: Record<string, string> = {};\n        headerArr.forEach((value: string) => {\n            const parts = value.split(\": \");\n            const headerName = parts.shift();\n            const headerVal = parts.join(\": \");\n            if (headerName && headerVal) {\n                headerDict[headerName] = headerVal;\n            }\n        });\n\n        return headerDict;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}