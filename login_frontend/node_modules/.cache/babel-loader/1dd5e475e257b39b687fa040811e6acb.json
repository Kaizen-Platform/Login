{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, StringUtils, PromptValue } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentIframeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentIframeClient, _super);\n\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\r\n   * @param request\r\n   */\n\n\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenByIframe called\"); // Check that we have some SSO data\n\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            } // Check that prompt is set to none, throw error if it is set to anything else.\n\n\n            if (request.prompt && request.prompt !== PromptValue.NONE) {\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: PromptValue.NONE\n            }), InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(silentRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(silentRequest)];\n\n          case 5:\n            navigateUrl = _a.sent();\n            return [4\n            /*yield*/\n            , this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger)];\n\n          case 6:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentIframeClient.prototype.silentTokenHelper = function (navigateUrl, authCodeRequest, authClient, browserRequestLogger) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentHandler, msalFrame, hash, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);\n            return [4\n            /*yield*/\n            , silentHandler.initiateAuthRequest(navigateUrl)];\n\n          case 1:\n            msalFrame = _a.sent();\n            return [4\n            /*yield*/\n            , silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n\n          case 2:\n            hash = _a.sent();\n            state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent, authCodeRequest.correlationId); // Handle response from hash string\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n\n  return SilentIframeClient;\n}(StandardInteractionClient);\n\nexport { SilentIframeClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","correlationId","_super","_this","SilentIframeClient","request","verbose","StringUtils","isEmpty","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","BrowserAuthError","createSilentPromptValueError","initializeAuthorizationRequest","__assign","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","serverTelemetryManager","initializeServerTelemetryManager","initializeAuthorizationCodeRequest","authCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","getAuthCodeUrl","navigateUrl","silentTokenHelper","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","Promise","reject","createSilentLogoutUnsupportedError","browserRequestLogger","silentHandler","SilentHandler","system","navigateFrameWait","initiateAuthRequest","msalFrame","monitorIframeForHash","iframeHashTimeout","hash","validateAndExtractStateFromHash","handleCodeResponseFromHash","networkClient","StandardInteractionClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\n     * @param request\n     */\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenByIframe called\");\n        // Check that we have some SSO data\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n\n        // Check that prompt is set to none, throw error if it is set to anything else.\n        if (request.prompt && request.prompt !== PromptValue.NONE) {\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\n            ...request,\n            prompt: PromptValue.NONE\n        }, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create authorize request url\n            const navigateUrl = await authClient.getAuthCodeUrl(silentRequest);\n\n            return await this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(navigateUrl: string, authCodeRequest: CommonAuthorizationCodeRequest, authClient: AuthorizationCodeClient, browserRequestLogger: Logger): Promise<AuthenticationResult> {\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);\n        // Get the frame handle for the silent request\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\n        const state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent, authCodeRequest.correlationId);\n\n        // Handle response from hash string\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}