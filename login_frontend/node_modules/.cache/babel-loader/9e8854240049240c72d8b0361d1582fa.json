{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(validRequest)];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || \"\";\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, currentAuthority, authClient, interactionHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"mappings":"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","names":["__extends","RedirectClient","request","initializeAuthorizationRequest","InteractionType","Redirect","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","initializeAuthorizationCodeRequest","authCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","logger","verbose","interactionHandler","RedirectHandler","browserCrypto","getAuthCodeUrl","navigateUrl","redirectStartPage","getRedirectStartPage","verbosePii","initiateAuthRequest","navigationClient","redirectTimeout","config","system","redirectNavigationTimeout","onRedirectNavigate","e_1","AuthError","setCorrelationId","correlationId","cacheFailedRequest","cleanRequestByState","hash","handleRedirectPromise","isInteractionInProgress","info","responseHash","getRedirectResponseHash","window","location","cleanRequestByInteractionType","validateAndExtractStateFromHash","e","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","loginRequestUrlNormalized","UrlString","removeHashFromUrl","currentUrlNormalized","href","auth","navigateToLoginRequestUrl","handleHash","handleHashResult","indexOf","BrowserUtils","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","e_2","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","getCachedRequest","currentAuthority","getCachedAuthority","BrowserAuthError","createNoCachedAuthorityError","handleCodeResponseFromHash","networkClient","clientId","logoutRequest","validLogoutRequest","initializeLogoutRequest","logout","eventHandler","emitEvent","EventType","LOGOUT_START","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","navigate","navigateExternal","e_3","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri","StandardInteractionClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\RedirectClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl(validRequest);\n\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash\n     */\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            let state: string;\n            try {\n                state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);\n                this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || \"\";\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n                return this.handleHash(responseHash, state, serverTelemetryManager);\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponseHash(hash: string): string | null {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\n\n        if (isResponseHash) {\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return hash;\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n        return cachedHash;\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw BrowserAuthError.createNoCachedAuthorityError();\n        }\n\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\n        this.logger.verbose(\"Auth code client created\");\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n\n        try {\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch(e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}