{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentRefreshClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentRefreshClient, _super);\n\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n\n\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, serverTelemetryManager, refreshTokenClient;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\"); // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n\n            return [2\n            /*return*/\n            , refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n\n              serverTelemetryManager.cacheFailedRequest(e);\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new RefreshTokenClient(clientConfig)];\n        }\n      });\n    });\n  };\n\n  return SilentRefreshClient;\n}(StandardInteractionClient);\n\nexport { SilentRefreshClient };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;AAUyCA;;AAAzC;;AA2CC;;;;;;;AAtCSC,+CAAN,UAAmBC,OAAnB,EAAmD;;;;;;;;;+BAExCA;AACA;AAAA;AAAA,cAAM,KAAKC,qBAAL,CAA2BD,OAA3B,CAAN;;;AAFDE,yBAAa,qCAEZC,SAFY,GAAb;AAIAC,kCAAsB,GAAG,KAAKC,gCAAL,CAAsCC,KAAK,CAACC,6BAA5C,CAAzB;AAEqB;AAAA;AAAA,cAAM,KAAKC,wBAAL,CAA8BJ,sBAA9B,EAAsDF,aAAa,CAACO,SAApE,EAA+EP,aAAa,CAACQ,iBAA7F,CAAN;;;AAArBC,8BAAkB,GAAGR,SAArB;AACN,iBAAKS,MAAL,CAAYC,OAAZ,CAAoB,8BAApB;;AAGA;AAAA;AAAA,cAAOF,kBAAkB,CAACG,0BAAnB,CAA8CZ,aAA9C,EAA6Da,KAA7D,CAAmE,aAAC;AACvE,kBAAIC,CAAC,YAAYC,SAAjB,EAA4B;AACxBD,iBAAC,CAACE,gBAAF,CAAmBC,KAAI,CAACC,aAAxB;AACH;;AACDhB,oCAAsB,CAACiB,kBAAvB,CAA0CL,CAA1C;AACA,oBAAMA,CAAN;AACH,aANM,CAAP;;;;AAOH,GAlBK;;;;;;AAuBNjB;;AAEI,WAAOuB,OAAO,CAACC,MAAR,CAAeC,gBAAgB,CAACC,kCAAjB,EAAf,CAAP;AACH,GAHD;;;;;;;;AAUgB1B,2DAAhB,UAAyCK,sBAAzC,EAAyFsB,YAAzF,EAAgHhB,iBAAhH,EAAqJ;;;;;;AAE5H;AAAA;AAAA,cAAM,KAAKiB,sBAAL,CAA4BvB,sBAA5B,EAAoDsB,YAApD,EAAkEhB,iBAAlE,CAAN;;;AAAfkB,wBAAY,GAAGC,SAAf;AACN;AAAA;AAAA,cAAO,IAAIC,kBAAJ,CAAuBF,YAAvB,CAAP;;;;AACH,GAJe;;AAKpB;AA3CA,EAAyCG","names":["__extends","SilentRefreshClient","request","initializeBaseRequest","silentRequest","_b","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createRefreshTokenClient","authority","azureCloudOptions","refreshTokenClient","logger","verbose","acquireTokenByRefreshToken","catch","e","AuthError","setCorrelationId","_this","correlationId","cacheFailedRequest","Promise","reject","BrowserAuthError","createSilentLogoutUnsupportedError","authorityUrl","getClientConfiguration","clientConfig","_a","RefreshTokenClient","StandardInteractionClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions } from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Refresh token client created\");\n\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(e => {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        });\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new RefreshTokenClient(clientConfig);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}