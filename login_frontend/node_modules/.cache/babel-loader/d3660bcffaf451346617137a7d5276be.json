{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\n\nvar AccountEntity =\n/** @class */\nfunction () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n\n\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n\n      default:\n        {\n          throw ClientAuthError.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n\n\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n\n\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || \"\", accountInterface.tenantId || \"\"];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n\n\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    var env = environment || authority && authority.getPreferredCache();\n\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    account.environment = env; // non AAD scenarios can have empty realm\n\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\n    account.oboAssertion = oboAssertion;\n\n    if (idToken) {\n      account.idTokenClaims = idToken.claims; // How do you account for MSA CID here?\n\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n       * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n       */\n\n      account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n\n\n  AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {\n    var _a, _b, _c, _d;\n\n    var account = new AccountEntity();\n    account.authorityType = authority && authority.authorityType === AuthorityType.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId; // non AAD scenarios can have empty realm\n\n    account.realm = \"\";\n    account.oboAssertion = oboAssertion;\n    var env = environment || authority && authority.getPreferredCache();\n\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\"; // upn claim for most ADFS scenarios\n\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n\n\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING; // since ADFS does not have tid and does not set client_info\n\n    if (authType === AuthorityType.Adfs) {\n      return accountId;\n    } // for cases where there is clientInfo\n\n\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    } // default to \"sub\" claim\n\n\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n\n\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {}; // issued at timestamp and nonce are expected to change each time a new id token is acquired\n\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && claimsMatch;\n  };\n\n  return AccountEntity;\n}();\n\nexport { AccountEntity };","map":{"version":3,"mappings":"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","names":["AccountEntity","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountCacheKey","tenantId","realm","username","localAccountId","authorityType","CacheAccountType","ADFS_ACCOUNT_TYPE","CacheType","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","ClientAuthError","createUnexpectedAccountTypeError","name","idTokenClaims","accountInterface","accountKey","clientInfo","idToken","authority","oboAssertion","cloudGraphHostName","msGraphHost","account","env","getPreferredCache","createInvalidCacheEnvironmentError","claims","_a","tid","_b","oid","_c","sub","_d","preferred_username","_e","emails","_f","AuthorityType","Adfs","upn","serverClientInfo","authType","logger","cryptoObj","Constants","EMPTY_STRING","buildClientInfo","StringUtils","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","entity","hasOwnProperty","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\cache\\entities\\AccountEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Separators,\n    CacheAccountType,\n    CacheType,\n    Constants,\n} from \"../../utils/Constants\";\nimport { Authority } from \"../../authority/Authority\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { buildClientInfo } from \"../../account/ClientInfo\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { AccountInfo } from \"../../account/AccountInfo\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\nimport { AuthorityType } from \"../../authority/AuthorityType\";\nimport { Logger } from \"../../logger/Logger\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      clientInfo: Full base64 encoded client info received from ESTS\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      oboAssertion: access token passed in as part of OBO request\n *      idTokenClaims: Object containing claims parsed from ID token\n * }\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    name?: string;\n    clientInfo?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    oboAssertion?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string; \n    idTokenClaims?: TokenClaims;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n\n    /**\n     * returns the type of the cache (in this case account)\n     */\n    generateType(): number {\n        switch (this.authorityType) {\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\n                return CacheType.ADFS;\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n                return CacheType.MSA;\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n                return CacheType.MSSTS;\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n                return CacheType.GENERIC;\n            default: {\n                throw ClientAuthError.createUnexpectedAccountTypeError();\n            }\n        }\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims\n        };\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            accountInterface.tenantId || \"\",\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param clientInfo\n     * @param authority\n     * @param idToken\n     * @param policy\n     */\n    static createAccount(\n        clientInfo: string,\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        account.clientInfo = clientInfo;\n        account.homeAccountId = homeAccountId;\n\n        const env = environment || (authority && authority.getPreferredCache());\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = idToken?.claims?.tid || \"\";\n        account.oboAssertion = oboAssertion;\n        \n        if (idToken) {\n            account.idTokenClaims = idToken.claims;\n\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n\n            /*\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\n             */\n            account.username = idToken?.claims?.preferred_username || (idToken?.claims?.emails? idToken.claims.emails[0]: \"\");\n            account.name = idToken?.claims?.name;\n        }\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        return account;\n    }\n\n    /**\n     * Builds non-AAD/ADFS account.\n     * @param authority\n     * @param idToken\n     */\n    static createGenericAccount(\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = (authority && authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = homeAccountId;\n        // non AAD scenarios can have empty realm\n        account.realm = \"\";\n        account.oboAssertion = oboAssertion;\n\n        const env = environment || authority && authority.getPreferredCache();\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        if (idToken) {\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n            // upn claim for most ADFS scenarios\n            account.username = idToken?.claims?.upn || \"\";\n            account.name = idToken?.claims?.name || \"\";\n            account.idTokenClaims = idToken?.claims;\n        }\n\n        account.environment = env;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        /*\n         * add uniqueName to claims\n         * account.name = idToken.claims.uniqueName;\n         */\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(serverClientInfo: string, authType: AuthorityType, logger: Logger, cryptoObj: ICrypto, idToken?: AuthToken): string {\n\n        const accountId = idToken?.claims?.sub ? idToken.claims.sub : Constants.EMPTY_STRING;\n\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs) {\n            return accountId;\n        }\n\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            try {\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n                }\n            } catch (e) {}\n        }\n\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA \n     * @param accountB \n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\n            (accountAClaims.nonce === accountBClaims.nonce);\n        }\n\n        return (accountA.homeAccountId === accountB.homeAccountId) && \n            (accountA.localAccountId === accountB.localAccountId) &&\n            (accountA.username === accountB.username) &&\n            (accountA.tenantId === accountB.tenantId) &&\n            (accountA.environment === accountB.environment) &&\n            claimsMatch;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}