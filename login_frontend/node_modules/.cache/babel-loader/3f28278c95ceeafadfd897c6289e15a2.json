{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { AsyncMemoryStorage } from '../cache/AsyncMemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = {\n      asymmetricKeys: new AsyncMemoryStorage(this.logger),\n      symmetricKeys: new AsyncMemoryStorage(this.logger)\n    };\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _a.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _a.sent();\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataStoreNames, databaseStorage, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            dataStoreNames = Object.keys(this.cache);\n            databaseStorage = this.cache[dataStoreNames[0]];\n            if (!databaseStorage) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , databaseStorage.deleteDatabase()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = false;\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , _a];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _a.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            header = {\n              alg: publicKeyJwk.alg,\n              type: KEY_FORMAT_JWK\n            };\n            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header)); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _a.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            return [2\n            /*return*/\n            , tokenString + \".\" + encodedSignature];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"mappings":"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","names":["logger","browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","asymmetricKeys","AsyncMemoryStorage","symmetricKeys","CryptoOps","generateGuid","input","encode","decode","generateCodes","request","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","keyPair","_a","exportJwk","publicKey","publicKeyJwk","pubKeyThumprintObj","e","kty","n","publicJwkString","getJwkString","hashString","publicJwkHash","privateKey","privateKeyJwk","importJwk","unextractablePrivateKey","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","kid","removeItem","containsKey","keyFound","dataStoreNames","Object","keys","databaseStorage","deleteDatabase","payload","getItem","cachedKeyPair","BrowserAuthError","createSigningKeyNotFoundInStorageError","publicKeyJwkString","header","alg","type","KEY_FORMAT_JWK","encodedHeader","urlEncode","JSON","stringify","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","BrowserStringUtils","stringToArrayBuffer","sign","signatureBuffer","encodedSignature","urlEncodeArr","Uint8Array","plainText","sha256Digest","hashBuffer","hashBytes"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\crypto\\CryptoOps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nexport type CryptoKeyStore = {\n    asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\n    symmetricKeys: AsyncMemoryStorage<CryptoKey>;\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = {\n            asymmetricKeys: new AsyncMemoryStorage<CachedKeyPair>(this.logger),\n            symmetricKeys: new AsyncMemoryStorage<CryptoKey>(this.logger)\n        };\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        const dataStoreNames = Object.keys(this.cache);\n        const databaseStorage = this.cache[dataStoreNames[0]];\n        return databaseStorage ? await databaseStorage.deleteDatabase() : false;\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string): Promise<string> {\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n\n        // Generate header\n        const header = {\n            alg: publicKeyJwk.alg,\n            type: KEY_FORMAT_JWK\n        };\n        const encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        return `${tokenString}.${encodedSignature}`;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}