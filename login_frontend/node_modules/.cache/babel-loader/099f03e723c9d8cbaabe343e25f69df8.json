{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\n\nvar InteractionRequiredServerErrorMessage = [\"interaction_required\", \"consent_required\", \"login_required\"];\nvar InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\"];\n/**\r\n * Interaction required errors defined by the SDK\r\n */\n\nvar InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No refresh token found in the cache. Please sign-in.\"\n  }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */\n\nvar InteractionRequiredAuthError =\n/** @class */\nfunction (_super) {\n  __extends(InteractionRequiredAuthError, _super);\n\n  function InteractionRequiredAuthError(errorCode, errorMessage, subError) {\n    var _this = _super.call(this, errorCode, errorMessage, subError) || this;\n\n    _this.name = \"InteractionRequiredAuthError\";\n    Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n   * @param errorCode\r\n   * @param errorString\r\n   * @param subError\r\n   */\n\n\n  InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {\n    var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function (irErrorCode) {\n      return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n  };\n  /**\r\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n   */\n\n\n  InteractionRequiredAuthError.createNoTokensFoundError = function () {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n  };\n\n  return InteractionRequiredAuthError;\n}(AuthError);\n\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage };","map":{"version":3,"mappings":";;;;;AAAA;;;;;AAOA;;;;IAGaA,qCAAqC,GAAG,CACjD,sBADiD,EAEjD,kBAFiD,EAGjD,gBAHiD;IAMxCC,sCAAsC,GAAG,CAClD,cADkD,EAElD,mBAFkD,EAGlD,cAHkD,EAIlD,uBAJkD,EAKlD,kBALkD;AAQtD;;;;IAGaC,mCAAmC,GAAG;AAC/CC,oBAAkB,EAAE;AAChBC,QAAI,EAAE,iBADU;AAEhBC,QAAI,EAAE;AAFU;AAD2B;AAOnD;;;;;;;AAGkDC;;AAE9C,wCAAYC,SAAZ,EAAgCC,YAAhC,EAAuDC,QAAvD,EAAwE;AAAxE,gBACIC,kBAAMH,SAAN,EAAiBC,YAAjB,EAA+BC,QAA/B,KAAwC,IAD5C;;AAEIE,SAAI,CAACC,IAAL,GAAY,8BAAZ;AAEAC,UAAM,CAACC,cAAP,CAAsBH,KAAtB,EAA4BI,4BAA4B,CAACC,SAAzD;;AACH;;;;;;;;;AAQMD,4DAAP,UAAkCR,SAAlC,EAAsDU,WAAtD,EAA4ER,QAA5E,EAA6F;AACzF,QAAMS,8BAA8B,GAAG,CAAC,CAACX,SAAF,IAAeP,qCAAqC,CAACmB,OAAtC,CAA8CZ,SAA9C,IAA2D,CAAC,CAAlH;AACA,QAAMa,6BAA6B,GAAG,CAAC,CAACX,QAAF,IAAcR,sCAAsC,CAACkB,OAAvC,CAA+CV,QAA/C,IAA2D,CAAC,CAAhH;AACA,QAAMY,8BAA8B,GAAG,CAAC,CAACJ,WAAF,IAAiBjB,qCAAqC,CAACsB,IAAtC,CAA2C,UAACC,WAAD,EAAY;AAC3G,aAAON,WAAW,CAACE,OAAZ,CAAoBI,WAApB,IAAmC,CAAC,CAA3C;AACH,KAFuD,CAAxD;AAIA,WAAOL,8BAA8B,IAAIG,8BAAlC,IAAoED,6BAA3E;AACH,GARM;;;;;;AAaAL,0DAAP;AACI,WAAO,IAAIA,4BAAJ,CAAiCb,mCAAmC,CAACC,kBAApC,CAAuDC,IAAxF,EAA8FF,mCAAmC,CAACC,kBAApC,CAAuDE,IAArJ,CAAP;AACH,GAFM;;AAGX;AA/BA,EAAkDmB","names":["InteractionRequiredServerErrorMessage","InteractionRequiredAuthSubErrorMessage","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","desc","__extends","errorCode","errorMessage","subError","_super","_this","name","Object","setPrototypeOf","InteractionRequiredAuthError","prototype","errorString","isInteractionRequiredErrorCode","indexOf","isInteractionRequiredSubError","isInteractionRequiredErrorDesc","some","irErrorCode","AuthError"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\error\\InteractionRequiredAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nexport const InteractionRequiredServerErrorMessage = [\n    \"interaction_required\",\n    \"consent_required\",\n    \"login_required\"\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\"\n];\n\n/**\n * Interaction required errors defined by the SDK\n */\nexport const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No refresh token found in the cache. Please sign-in.\"\n    }\n};\n\n/**\n * Error thrown when user interaction is required.\n */\nexport class InteractionRequiredAuthError extends AuthError {\n\n    constructor(errorCode?: string, errorMessage?: string, subError?: string) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"InteractionRequiredAuthError\";\n\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    }\n\n    /**\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\n     * @param errorCode \n     * @param errorString \n     * @param subError \n     */\n    static isInteractionRequiredError(errorCode?: string, errorString?: string, subError?: string) : boolean {\n        const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n        const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n        const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n    }\n\n    /**\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\n     */\n    static createNoTokensFoundError(): InteractionRequiredAuthError {\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}