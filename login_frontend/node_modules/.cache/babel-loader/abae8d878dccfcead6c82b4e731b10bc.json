{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ThrottlingUtils } from './ThrottlingUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthError } from '../error/AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NetworkManager =\n/** @class */\nfunction () {\n  function NetworkManager(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint\r\n   * @param tokenEndpoint\r\n   * @param options\r\n   */\n\n\n  NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              throw e_1;\n            } else {\n              throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\n            }\n\n          case 4:\n            ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  return NetworkManager;\n}();\n\nexport { NetworkManager };","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;AAsBI,0BAAYA,aAAZ,EAA2CC,YAA3C,EAAqE;AACjE,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACH;;;;;;;;;AAQKC,6CAAN,UAAyBC,UAAzB,EAAwDC,aAAxD,EAA+EC,OAA/E,EAA6G;;;;;;AACzGC,2BAAe,CAACC,UAAhB,CAA2B,KAAKN,YAAhC,EAA8CE,UAA9C;;;;;;AAIe;AAAA;AAAA,cAAM,KAAKH,aAAL,CAAmBQ,oBAAnB,CAA2CJ,aAA3C,EAA0DC,OAA1D,CAAN;;;AAAXI,oBAAQ,GAAGC,SAAX;;;;;;;;AAEA,gBAAIC,GAAC,YAAYC,SAAjB,EAA4B;AACxB,oBAAMD,GAAN;AACH,aAFD,MAEO;AACH,oBAAME,eAAe,CAACC,kBAAhB,CAAmCV,aAAnC,EAAkDO,GAAlD,CAAN;AACH;;;AAGLL,2BAAe,CAACS,WAAhB,CAA4B,KAAKd,YAAjC,EAA+CE,UAA/C,EAA2DM,QAA3D;AAEA;AAAA;AAAA,cAAOA,QAAP;;;;AACH,GAjBK;;AAkBV;AAAC","names":["networkClient","cacheManager","NetworkManager","thumbprint","tokenEndpoint","options","ThrottlingUtils","preProcess","sendPostRequestAsync","response","_a","e_1","AuthError","ClientAuthError","createNetworkError","postProcess"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\network\\NetworkManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AuthError } from \"../error/AuthError\";\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n\nexport class NetworkManager {\n    private networkClient: INetworkModule;\n    private cacheManager: CacheManager;\n\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest<T>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync<T>(tokenEndpoint, options);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw ClientAuthError.createNetworkError(tokenEndpoint, e);\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}