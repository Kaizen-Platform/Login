{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    return __awaiter(this, void 0, void 0, function () {\n      var refreshToken, refreshTokenRequest;\n      return __generator(this, function (_a) {\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci); // no refresh Token\n\n        if (!refreshToken) {\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, cnfString, clientInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            cnfString = _a.sent();\n            parameterBuilder.addPopToken(cnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _a.label = 3;\n\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","RefreshTokenClient","request","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","errorCode","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","refreshToken","readRefreshTokenFromCache","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireToken","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","headers","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","generateCnf","cnfString","addPopToken","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","verbose","UPN","addCcsUpn","BaseClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\client\\RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors  } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\n\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>{\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        // no refresh Token\n        if (!refreshToken) {\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const cnfString = await popTokenGenerator.generateCnf(request);\n            parameterBuilder.addPopToken(cnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}