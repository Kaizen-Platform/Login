{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.enableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  };\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.disableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n\n\n  EventHandler.prototype.handleAccountCacheChange = function (e) {\n    try {\n      var cacheValue = e.newValue || e.oldValue;\n\n      if (!cacheValue) {\n        return;\n      }\n\n      var parsedValue = JSON.parse(cacheValue);\n\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n\n      var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      var accountInfo = accountEntity.getAccountInfo();\n\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"mappings":"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","names":["logger","browserCrypto","eventCallbacks","Map","listeningToStorageEvents","handleAccountCacheChange","bind","EventHandler","callback","window","callbackId","createNewGuid","set","verbose","delete","addEventListener","removeEventListener","eventType","interactionType","payload","error","message_1","timestamp","Date","now","info","forEach","_this","apply","e","cacheValue","newValue","oldValue","parsedValue","JSON","parse","AccountEntity","isAccountEntity","accountEntity","CacheManager","toObject","accountInfo","getAccountInfo","emitEvent","EventType","ACCOUNT_ADDED","undefined","ACCOUNT_REMOVED"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\event\\EventHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, AccountEntity, CacheManager } from \"@azure/msal-common\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\nimport { EventType } from \"./EventType\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<string, EventCallbackFunction>;\n    private logger: Logger;\n    private browserCrypto: ICrypto;\n    private listeningToStorageEvents: boolean;\n\n    constructor(logger: Logger, browserCrypto: ICrypto) {\n        this.eventCallbacks = new Map();\n        this.logger = logger;\n        this.browserCrypto = browserCrypto;\n        this.listeningToStorageEvents = false;\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        if (typeof window !== \"undefined\") {\n            const callbackId = this.browserCrypto.createNewGuid();\n            this.eventCallbacks.set(callbackId, callback);\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\n    \n            return callbackId;\n        }\n        \n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (!this.listeningToStorageEvents) {\n            this.logger.verbose(\"Adding account storage listener.\");\n            this.listeningToStorageEvents = true;\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\n        } else {\n            this.logger.verbose(\"Account storage listener already registered.\");\n        }\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (this.listeningToStorageEvents) {\n            this.logger.verbose(\"Removing account storage listener.\");\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n            this.listeningToStorageEvents = false;\n        } else {\n            this.logger.verbose(\"No account storage listener registered.\");\n        }\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\n        if (typeof window !== \"undefined\") {\n            const message: EventMessage = {\n                eventType: eventType,\n                interactionType: interactionType || null,\n                payload: payload || null,\n                error: error || null,\n                timestamp: Date.now()\n            };\n\n            this.logger.info(`Emitting event: ${eventType}`);\n\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\n                callback.apply(null, [message]);\n            });\n        }\n    }\n\n    /**\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\n     */\n    private handleAccountCacheChange(e: StorageEvent): void {\n        try {\n            const cacheValue = e.newValue || e.oldValue;\n            if (!cacheValue) {\n                return;\n            }\n            const parsedValue = JSON.parse(cacheValue);\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n                return;\n            }\n            const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedValue);\n            const accountInfo = accountEntity.getAccountInfo();\n            if (!e.oldValue && e.newValue) {\n                this.logger.info(\"Account was added to cache in a different window\");\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n            } else if (!e.newValue && e.oldValue) {\n                this.logger.info(\"Account was removed from cache in a different window\");\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n            }\n        } catch (e) {\n            return;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}