{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient =\n/** @class */\nfunction (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient);\n\nexport { UsernamePasswordClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","UsernamePasswordClient","request","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\client\\UsernamePasswordClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { Authority } from \"../authority/Authority\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\n\n/**\n * Oauth2.0 Password grant client\n * Note: We are only supporting public clients for password grant and for purely testing purposes\n */\nexport class UsernamePasswordClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\n     * password_grant\n     * @param request\n     */\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"in acquireToken call\");\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n\n        return tokenResponse;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\n            credential: request.username,\n            type: CcsCredentialType.UPN\n        });\n\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\n            parameterBuilder.addCcsUpn(request.username);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}