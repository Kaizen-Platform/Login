{"ast":null,"code":"/*! @azure/msal-browser v2.22.0 2022-02-08 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentAuthCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentAuthCodeClient, _super);\n\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n\n\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\"); // Auth code payload is required\n\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait); // Handle auth code parameters from request\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n\n          case 4:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\n\nexport { SilentAuthCodeClient };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;;;;;AAkB0CA;;AAGtC,gCAAYC,MAAZ,EAA0CC,WAA1C,EAA4EC,aAA5E,EAAoGC,MAApG,EAAoHC,YAApH,EAAgJC,gBAAhJ,EAAqLC,KAArL,EAAmMC,aAAnM,EAAyN;AAAzN,gBACIC,kBAAMR,MAAN,EAAcC,WAAd,EAA2BC,aAA3B,EAA0CC,MAA1C,EAAkDC,YAAlD,EAAgEC,gBAAhE,EAAkFE,aAAlF,KAAgG,IADpG;;AAEIE,SAAI,CAACH,KAAL,GAAaA,KAAb;;AACH;;;;;;;AAMKI,gDAAN,UAAmBC,OAAnB,EAAoD;;;;;;AAChD,iBAAKR,MAAL,CAAYS,KAAZ,CAAkB,0CAAlB;;AAGA,gBAAI,CAACD,OAAO,CAACE,IAAb,EAAmB;AACf,oBAAMC,gBAAgB,CAACC,2BAAjB,EAAN;AACH;;AAG8C;AAAA;AAAA,cAAM,KAAKC,8BAAL,CAAoCL,OAApC,EAA6CM,eAAe,CAACC,MAA7D,CAAN;;;AAAzCC,yBAAa,GAA4BC,SAAzC;AACN,iBAAKC,cAAL,CAAoBC,kBAApB,CAAuCH,aAAa,CAACI,KAArD,EAA4DJ,aAAa,CAACK,KAA1E,EAAiFL,aAAa,CAACM,SAA/F,EAA0GN,aAAa,CAACO,SAAd,IAA2B,EAArI,EAAyIP,aAAa,CAACQ,OAAd,IAAyB,IAAlK;AAEMC,kCAAsB,GAAG,KAAKC,gCAAL,CAAsC,KAAKvB,KAA3C,CAAzB;;;;;;AAKIwB,2BAAe,yBACdX,aADc,GACD;AAChBN,kBAAI,EAAEF,OAAO,CAACE;AADE,aADC,CAAf;AAMe;AAAA;AAAA,cAAM,KAAKkB,sBAAL,CAA4BH,sBAA5B,EAAoDT,aAAa,CAACM,SAAlE,CAAN;;;AAAfO,wBAAY,GAAGZ,SAAf;AACAa,sBAAU,GAAqC,IAAIC,gCAAJ,CAAqCF,YAArC,CAA/C;AACN,iBAAK7B,MAAL,CAAYgC,OAAZ,CAAoB,0BAApB;AAGMC,yBAAa,GAAG,IAAIC,aAAJ,CAAkBJ,UAAlB,EAA8B,KAAKZ,cAAnC,EAAmDS,eAAnD,EAAoE,KAAK3B,MAAzE,EAAiF,KAAKH,MAAL,CAAYsC,MAAZ,CAAmBC,iBAApG,CAAhB;;AAGN;AAAA;AAAA,cAAOH,aAAa,CAACI,4BAAd,CACH;AACI3B,kBAAI,EAAEF,OAAO,CAACE,IADlB;AAEI4B,0BAAY,EAAE9B,OAAO,CAAC+B,WAF1B;AAGIC,mCAAqB,EAAEhC,OAAO,CAACiC,kBAHnC;AAIIC,sCAAwB,EAAElC,OAAO,CAACmC;AAJtC,aADG,EAOH3B,aAAa,CAACI,KAPX,EAQHU,UAAU,CAACR,SARR,EASH,KAAKsB,aATF,EAUH,KAVG,CAAP;;;;;AAaA,gBAAIC,GAAC,YAAYC,SAAjB,EAA4B;AACxBD,iBAAC,CAACE,gBAAF,CAAmB,KAAK3C,aAAxB;AACH;;AACDqB,kCAAsB,CAACuB,kBAAvB,CAA0CH,GAA1C;AACA,iBAAK3B,cAAL,CAAoB+B,mBAApB,CAAwCjC,aAAa,CAACI,KAAtD;AACA,kBAAMyB,GAAN;;;;;;;;;AAEP,GAnDK;;;;;;AAwDNtC;;AAEI,WAAO2C,OAAO,CAACC,MAAR,CAAexC,gBAAgB,CAACyC,kCAAjB,EAAf,CAAP;AACH,GAHD;;AAIJ;AAxEA,EAA0CC","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","correlationId","_super","_this","SilentAuthCodeClient","request","trace","code","BrowserAuthError","createAuthCodeRequiredError","initializeAuthorizationRequest","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","account","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","getClientConfiguration","clientConfig","authClient","HybridSpaAuthorizationCodeClient","verbose","silentHandler","SilentHandler","system","navigateFrameWait","handleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","networkClient","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClient"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentAuthCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n    \n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request \n     */\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n\n        // Auth code payload is required\n        if (!request.code) {\n            throw BrowserAuthError.createAuthCodeRequiredError();\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n\n            // Initialize the client\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n\n            // Handle auth code parameters from request\n            return silentHandler.handleCodeResponseFromServer(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName\n                },\n                silentRequest.state, \n                authClient.authority, \n                this.networkClient,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}