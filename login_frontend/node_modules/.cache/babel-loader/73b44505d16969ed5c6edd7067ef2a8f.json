{"ast":null,"code":"/*! @azure/msal-common v6.1.0 2022-02-08 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscovery = new RegionDiscovery(networkInterface);\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n  }\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n      if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n        return AuthorityType.Adfs;\n      }\n\n      return AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        // ROPC policies may not have end_session_endpoint set\n        if (!this.metadata.end_session_endpoint) {\n          throw ClientAuthError.createLogoutNotSupportedError();\n        }\n\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _a.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _a.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, autodetectedRegionName, azureRegion;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _b.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)];\n\n          case 2:\n            autodetectedRegionName = _b.sent();\n            azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n            if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n   * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = {};\n\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n   * @param cachedMetadata\r\n   * @param newMetadata\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _a.sent();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            } else {\n              // Metadata could not be obtained from config, cache or network\n              throw ClientConfigurationError.createUntrustedAuthorityError();\n            }\n\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      try {\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n\n        if (metadata) {\n          return metadata;\n        }\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   * @param networkInterface\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, options, match, response, metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            options = {};\n\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n\n            match = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n\n            if (metadata.length === 0) {\n              // If no metadata is returned, authority is untrusted\n              return [2\n              /*return*/\n              , null];\n            }\n\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            if (!match) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n\n\n  Authority.generateAuthority = function (authorityString, azureCloudOptions) {\n    var authorityAzureCloudInstance;\n\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\n    }\n\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n\n    if (metadata.end_session_endpoint) {\n      metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    }\n\n    return metadata;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"mappings":"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","names":["authority","networkInterface","cacheManager","authorityOptions","proxyUrl","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscovery","RegionDiscovery","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","Constants","EMPTY_STRING","Object","Authority","pathSegments","canonicalAuthorityUrlComponents","PathSegments","length","toLowerCase","ADFS","AuthorityType","Adfs","Default","protocolMode","urlString","url","UrlString","_canonicalAuthorityUrlComponents","getUrlComponents","HostNameAndPort","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","ClientAuthError","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","issuer","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","ProtocolMode","OIDC","metadataEntity","getAuthorityMetadataByAlias","hostnameAndPort","AuthorityMetadataEntity","updateCanonicalAuthority","updateCloudDiscoveryMetadata","cloudDiscoverySource","_a","preferred_network","updateEndpointMetadata","endpointSource","AuthorityMetadataSource","CACHE","resetExpiresAt","cacheKey","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","getEndpointMetadataFromNetwork","_b","azureRegionConfiguration","azureRegion","detectRegion","environmentRegion","autodetectedRegionName","AZURE_REGION_AUTO_DISCOVER_FLAG","RegionDiscoveryOutcomes","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","NETWORK","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","ClientConfigurationError","createInvalidAuthorityMetadataError","options","sendGetRequestAsync","response","isOpenIdConfigResponse","body","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","AAD_INSTANCE_DISCOVERY_ENDPT","match","isCloudInstanceDiscoveryResponse","matches","knownAuthorities","filter","getDomainFromUrl","_this","authorityString","azureCloudOptions","authorityAzureCloudInstance","azureCloudInstance","AzureCloudInstance","None","DEFAULT_COMMON_TENANT","host","aliases","i","indexOf","KNOWN_PUBLIC_CLOUDS","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","isPublicCloudAuthority","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","__assign","buildRegionalAuthorityString"],"sources":["C:\\Users\\empti\\OneDrive\\Desktop\\User_Interface\\user_interface_frontend\\node_modules\\@azure\\msal-common\\src\\authority\\Authority.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { AuthorityMetadataSource, Constants, RegionDiscoveryOutcomes } from \"../utils/Constants\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport { AuthorityOptions , AzureCloudInstance } from \"./AuthorityOptions\";\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { AzureCloudOptions } from \"../config/ClientConfiguration\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n */\nexport class Authority {\n\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n    // Region discovery metadata\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Proxy url string\n    private proxyUrl: string;\n\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, proxyUrl?: string) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\n        this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n            return AuthorityType.Adfs;\n        }\n\n        return AuthorityType.Default;\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if(this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw ClientAuthError.createLogoutNotSupportedError();\n            }\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.issuer);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            const cachedPart = cachedAuthorityParts[index];\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n\n        return endpoint;\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\n\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getEndpointMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateEndpointMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getEndpointMetadataFromNetwork();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                const autodetectedRegionName = await this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl);\n\n                const azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\n                    ? autodetectedRegionName\n                    : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n                if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                    this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n                } else {\n                    if (autodetectedRegionName) {\n                        this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\n                            RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\n                            RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n                    } else {\n                        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                    }\n                }\n\n                if (azureRegion) {\n                    this.regionDiscoveryMetadata.region_used = azureRegion;\n                    metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n                }\n            }\n\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint, options);\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\n     * @param cachedMetadata\n     * @param newMetadata\n     */\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from config, cache or network\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            try {\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n                if (metadata) {\n                    return metadata;\n                }\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     * @param networkInterface\n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse>(instanceDiscoveryEndpoint, options);\n            const metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n            if (metadata.length === 0) {\n                // If no metadata is returned, authority is untrusted\n                return null;\n            }\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n        } catch(e) {\n            return null;\n        }\n\n        if (!match) {\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n\n        return matches.length > 0;\n    }\n\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(authorityString: string, azureCloudOptions?: AzureCloudOptions): string {\n        let authorityAzureCloudInstance;\n\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host]\n        };\n    }\n\n    /**\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\n     * @param response\n     * @param authority\n     */\n    static getCloudDiscoveryMetadataFromNetworkResponse(response: CloudDiscoveryMetadata[], authority: string): CloudDiscoveryMetadata | null {\n        for (let i = 0; i < response.length; i++) {\n            const metadata = response[i];\n            if (metadata.aliases.indexOf(authority) > -1) {\n                return metadata;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if(this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n\n        if (metadata.end_session_endpoint) {\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n        }\n\n        return metadata;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}